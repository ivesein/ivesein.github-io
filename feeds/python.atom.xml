<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ivesein-Blogs - Python</title><link href="http://ivesein.github.io/" rel="alternate"></link><link href="http://ivesein.github.io/feeds/python.atom.xml" rel="self"></link><id>http://ivesein.github.io/</id><updated>2017-02-10T10:14:00+08:00</updated><entry><title>Github+Pelican搭建博客教程</title><link href="http://ivesein.github.io/github-pelican-blog.html" rel="alternate"></link><published>2017-02-10T10:14:00+08:00</published><updated>2017-02-10T10:14:00+08:00</updated><author><name>Ivesein</name></author><id>tag:ivesein.github.io,2017-02-10:/github-pelican-blog.html</id><summary type="html">&lt;h3&gt;操作系统：Linux/ubuntu&lt;/h3&gt;
&lt;h4&gt;使用工具：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Github Pages——Github为每位注册用户提供300M的站点空间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pelican——基于Python的静态网页生成器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python——pelican工具需要Python运行环境。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Markdown——Markdown文本编辑器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他——个人申请的域名、Google Analytics(谷歌站点数据检测分析工具)、Disqus(提供博客评论功能)、DNSPod(提供免费域名解析注册服务)等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;##### 最终效果：欢迎访问我的个人博客：http://ivesein.github.io/&lt;/p&gt;
&lt;h4&gt;一 、使用Github Pages创建个人博客页面&lt;/h4&gt;
&lt;p&gt;Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。GitHub可以托管各种git库的站点。通过GitHub Pages生成的静态站点，可以免费托管、自定义主题、并且自制网页界面。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首先注册Github账户：http://github.com/。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登录Github账户，点击“Create a new …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h3&gt;操作系统：Linux/ubuntu&lt;/h3&gt;
&lt;h4&gt;使用工具：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Github Pages——Github为每位注册用户提供300M的站点空间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pelican——基于Python的静态网页生成器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python——pelican工具需要Python运行环境。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Markdown——Markdown文本编辑器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他——个人申请的域名、Google Analytics(谷歌站点数据检测分析工具)、Disqus(提供博客评论功能)、DNSPod(提供免费域名解析注册服务)等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;##### 最终效果：欢迎访问我的个人博客：http://ivesein.github.io/&lt;/p&gt;
&lt;h4&gt;一 、使用Github Pages创建个人博客页面&lt;/h4&gt;
&lt;p&gt;Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。GitHub可以托管各种git库的站点。通过GitHub Pages生成的静态站点，可以免费托管、自定义主题、并且自制网页界面。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首先注册Github账户：http://github.com/。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登录Github账户，点击“Create a new repo”创建库名为*username.github.io*的新仓库。&lt;em&gt;这里的username要替换为你自己的用户名&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建SSH密钥并上传到Github：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在终端输入：&lt;code&gt;ssh -keygen&lt;/code&gt;一路回车，完成后将.pub文件中的内容粘贴到github账户设置页面的ssh-key中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在终端输入：&lt;code&gt;ssh -T  git@github.com&lt;/code&gt;验证是否成功。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置好后就可上传你的blog项目到该仓库生成网页用来展示了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;*以上内容都很简单，有问题可以参考Github官方帮助文档：&lt;/p&gt;
&lt;p&gt;​    帮助文档：&lt;a href="https://help.github.com/articles/connecting-to-github-with-ssh/"&gt;Github官方帮助文档&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;二 、 安装Python、Pelican 和Markdown&lt;/h4&gt;
&lt;p&gt;Pelican是一套开源的使用Python编写的博客静态生成工具, 可以添加文章和和创建页面, 可以使用MarkDown reStructuredText 和 AsiiDoc 的格式来抒写, 同时使用 Disqus评论系统, 支持 RSS和Atom输出, 插件, 主题, 代码高亮等功能, 采用Jajin2模板引擎, 可以很容易的更改模板。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装Python：Linux/ubuntu系统一般自带Python。在终端输入：&lt;code&gt;python -V&lt;/code&gt;来查看当前Python版本信息。如果需要可以到官网安装：http://www.python.org/&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装Pelican：有两种方法来安装，如果安装了pip则可以在终端输入：&lt;code&gt;pip install pelican&lt;/code&gt;来安装；或者从github克隆最新代码安装。建议在virtualenv下使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;首先建立 virtualenv（Python虚拟环境）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;virtualenv  pelican                #创建pelican虚拟环境
    cd pelican
    sh bin/activate                    #激活虚拟环境&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从github克隆最新代码安装Pelican&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
 git clone git://github.com/getpelican/pelican.git
 cd pelican
 python setup.py install&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装Markdown&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;python
   pip install markdown&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;三 、 创建博客骨架&lt;/h4&gt;
&lt;p&gt;接下来将通过初始化Pelican设置来生成一个基本的博客框架。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建blog项目目录：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;mkdir blogs
   cd blogs
   pelican-quickstart&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据提示一步步输入相应的配置项，不知道如何设置可以直接默认即可，后续可以通过编辑peilicanconf.py文件进行配置更改。完成后会在根目录生成以下文件：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;.
   |-- content                # 所有博客文章放于此目录
   │   └── (pages)            # 存放手动创建的静态页面
   |-- develop_server.sh      # 用于开启测试服务器
   |-- Makefile               # 方便管理博客的Makefile
   |-- output                 # 静态生成文件
   |-- pelicanconf.py         # 配置文件
   |-- publishconf.py         # 配置文件&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;更改Makefile文件，设置一键上传部署到Github，打开根目录下的Makefile文件，更改以下部分：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;github: publish
           cd ./output ; git init ; git remote add origin                   git@github.com:username/username.github.io ; git add . ;         git commit -m 'my comments' ; git push origin +master  
   #这段命令的意思是：进入output文件夹，初始化仓库，添加本地仓库origin到远程  仓库，此处的username均要替换为你自己的github用户名&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;以后每次写完文章就可以通过在blogs项目根目录下执行&lt;code&gt;make github&lt;/code&gt;进行一键部署发布到github了。在http://username.github.io查看效果。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;四 、使用Markdown写测试博客并上传到github发布&lt;/h4&gt;
&lt;p&gt;Markdown是当下非常流行的一种文本编辑语法，支持HTML转换，书写博文排版也方便快捷。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;写一篇测试文章：用markdown语法写一篇测试文章保存为.md格式存放在content文件夹下。完成后执行以下命令，即可在浏览器输入&lt;code&gt;localhust：8000&lt;/code&gt;查看效果：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;make publish
   make serve&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个页面：这里以创建About页面为例。在content目录下创建pages子文件夹：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;mkdir content/pages&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后创建About.md并编辑以下内容：&lt;/p&gt;
&lt;p&gt;```
   title： About Me
   date： 2017-02-10&lt;/p&gt;
&lt;p&gt;Hello everyone！ I'm ivesein～
   ```&lt;/p&gt;
&lt;p&gt;*注意上面的title和date是.md文件的重要参数，需要卸载文档开头。比如&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Title: Pelican+Github
   Date: 2017-02-10 10:20
   Modified: 2017-02-10 10:30
   Tags: python, pelican
   Slug: build-blog-system-by-pelican
   Authors: Ivesein
   Summary: hahahah...
   Status: draft     #用于预览时使用，正式发布时应删除&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;*相关介绍请参见Pelican官方开发文档：http://pelican-zh.readthedocs.org/en/latest/zh-cn/。完成后同样可以在浏览器本地8000端口查看效果。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建导航目录项：Menu Item设置。在你的博客中，可以设置相应的菜单项，才当项是通过pelicanconf.py设置的，具体如下所示：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;MENUITEMS = (("ITEM1","http://github.com"),
                ("ITEM2",URL),
               ......)&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;五 、 安装主题&lt;/h4&gt;
&lt;p&gt;Pelican支持大量的开源主题，GitHub上的 pelican-themes 项目有几十套主题，大部分都带了效果预览图。可以从里面挑一个你喜欢的主题样式来使用。还有一个更方便的挑选主题的方式，直接打开 www.pelicanthemes.com 挑选吧。一个网页里就列出了几乎所有的主题。我的博客是使用 foundation-default-colours 主题，并在这套主题的基础上进行了一些定制。选定好喜欢的主题后，从GitHub上下载下来所有的主题： &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir ~/pelican
cd ~/pelican
git clone https://github.com/getpelican/pelican-themes.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从里面拷贝一份你选中的主题到项目根目录的 themes 目录下，在本文的例子中是 ~/lab/blogs/themes 。然后在 pelicanconf.py 和 publishconf.py 里通过下面代码指定博客主题： &lt;/p&gt;
&lt;p&gt;&lt;code&gt;THEME = "themes/foundation-default-colours"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;通常的做法是，选中一个自己喜欢的主题后，会进行一些定制。Pelican使用 Jinja2 来配置主题。一个主题的典型结构如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;├── static
│   ├── css
│   └── images
└── templates
    ├── analytics_cnzz.html # 这个是我添加的使用cnzz的统计服务的代码
    ├── analytics.html      # 这是Google Analytics的代码
    ├── archives.html       # 这个是博客归档页面的模板
    ├── article.html        # 这个是博客正文的显示模板
    ├── base.html           # 这个是所有页面的父类模板，即所有页面都引用这个页面。比如网页导航栏啊之                               类的，都定义在这里
    ├── categories.html     # 所有博客文章的分类列表
    ├── category.html       # 某个博客分类的文章列表模板
    ├── index.html          # 主页
    ├── page.html           # 分页显示的模板
    ├── tag.html            # 某类标签下的文章列表
    └── tags.html           # 所有的标签列表页面模板
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;稍微有点Jinja的知识加上一些HTML和CSS的知识，就可以自己定义主题了。&lt;/p&gt;
&lt;p&gt;为什么博客主页打开半天都不显示出来？因为GFW封锁了几乎所有和Google相关的网站，这些主题里又用了Google的字体，所以下载这些字体时会导致无法下载成功而半天不显示网页。解决方案很简单，直接修改css文件，不去下载Google字体即可。比如针对 foundation-default-colours 主题，打开主题根目录下的 static/css/foundation.css 和 static/css/foundation.min.css 文件，删除掉 @import url("//fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,700italic,400,300,700"); 内容即可。当然，如果你和你的读者都是翻墙高手，那就不会遇到这个问题了。&lt;/p&gt;
&lt;h4&gt;六 、安装第三方评论系统Disqus&lt;/h4&gt;
&lt;p&gt;在Disqus上申请一个站点，记住shortname。 在pelicanconf.py添加：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DISQUS_SITENAME = shortname&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;七 、添加Google Analytics&lt;/h4&gt;
&lt;p&gt;去Google Analytics申请账号并通过验证，记下跟踪ID（Track ID）， 在pelicanconf.py添加：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GOOGLE_ANALYTICS = '跟踪ID'&lt;/code&gt;&lt;/p&gt;</content><category term="pelican"></category><category term="python"></category><category term="blog"></category></entry><entry><title>Python格式化输出</title><link href="http://ivesein.github.io/Python_Output_Formatting.html" rel="alternate"></link><published>2016-06-17T00:00:00+08:00</published><updated>2016-06-17T00:00:00+08:00</updated><author><name>Ivesein</name></author><id>tag:ivesein.github.io,2016-06-17:/Python_Output_Formatting.html</id><summary type="html">&lt;hr&gt;
&lt;h4&gt;格式化输出&lt;/h4&gt;
&lt;p&gt;目前遇到过两种从输出值的方法:&lt;strong&gt;表达式语句&lt;/strong&gt;和&lt;strong&gt;print&lt;/strong&gt;语句.(第三种方式时使用文件对象的write()方法;标准输出文件可以引用&lt;strong&gt;sys.stdout&lt;/strong&gt;,详细内容见库参考手册)  &lt;/p&gt;
&lt;p&gt;有两种方法来设置输出格式:&lt;br&gt;
&lt;em&gt; 第一种是自己做所有的字符串处理;使用字符串切片和连接操作,你可以创建任何你想要的布局.字符串类型有一些方法,用于执行将字符串填充到指定列宽度的又用操作.
&lt;/em&gt; 第二种方法是使用str.format()方法.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;string&lt;/strong&gt;模块包含一个&lt;strong&gt;Template&lt;/strong&gt;类,提供另外一种向字符串带入值的方法.
如何将值转换为字符串?Python提供了将任何值转换为字符串的方法:将值传递给repr()和str()函数.  &lt;/p&gt;
&lt;h5&gt;Python提供填充空格使字符串在给定的列对其的方法&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;str.rjust():在左侧填充空格使字符串在给定宽度的列右对齐&lt;/li&gt;
&lt;li&gt;str.center():在左右两侧填充空格使字符串在给定宽度的列居中对其&lt;/li&gt;
&lt;li&gt;str.ljust():左对齐&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些方法不会输出任何内容,它们值返回新的字符串.如果输入的字符串太长,它们不会截断字符串,而是保持原样返回;这会使列的格式变得混乱,但是通常好于另外一种选择,那可能是一个错误的值.(如果想要截断 …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h4&gt;格式化输出&lt;/h4&gt;
&lt;p&gt;目前遇到过两种从输出值的方法:&lt;strong&gt;表达式语句&lt;/strong&gt;和&lt;strong&gt;print&lt;/strong&gt;语句.(第三种方式时使用文件对象的write()方法;标准输出文件可以引用&lt;strong&gt;sys.stdout&lt;/strong&gt;,详细内容见库参考手册)  &lt;/p&gt;
&lt;p&gt;有两种方法来设置输出格式:&lt;br&gt;
&lt;em&gt; 第一种是自己做所有的字符串处理;使用字符串切片和连接操作,你可以创建任何你想要的布局.字符串类型有一些方法,用于执行将字符串填充到指定列宽度的又用操作.
&lt;/em&gt; 第二种方法是使用str.format()方法.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;string&lt;/strong&gt;模块包含一个&lt;strong&gt;Template&lt;/strong&gt;类,提供另外一种向字符串带入值的方法.
如何将值转换为字符串?Python提供了将任何值转换为字符串的方法:将值传递给repr()和str()函数.  &lt;/p&gt;
&lt;h5&gt;Python提供填充空格使字符串在给定的列对其的方法&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;str.rjust():在左侧填充空格使字符串在给定宽度的列右对齐&lt;/li&gt;
&lt;li&gt;str.center():在左右两侧填充空格使字符串在给定宽度的列居中对其&lt;/li&gt;
&lt;li&gt;str.ljust():左对齐&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些方法不会输出任何内容,它们值返回新的字符串.如果输入的字符串太长,它们不会截断字符串,而是保持原样返回;这会使列的格式变得混乱,但是通常好于另外一种选择,那可能是一个错误的值.(如果想要截断,可以加上一个切片操作,例如x.ljust(n)[:n])  &lt;/p&gt;
&lt;p&gt;另外一种方法str.zfill(),它向数值字符串左侧填充0,该函数可以正确识别重负好:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;12&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zfill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;00012&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-3.14&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zfill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;-003.14&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;3.14159265359&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zfill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;3.14159265359&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h5&gt;str.format()方法的基本用法如下&lt;/h5&gt;
&lt;h6&gt;花括号及其中的字符()称为格式字段)将被替换为传递给str.format()方法的对象.&lt;/h6&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;We are the {} who say &amp;quot;{}!&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;knights&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Ni&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;We&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;knights&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt; &lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Ni!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h6&gt;括号中的数字指传递给str.format()方法的对象的位置.&lt;/h6&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{0} and {1}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;spam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;eggs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;spam&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;eggs&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{1} and {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;spam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;eggs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;eggs&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;spam&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h6&gt;如果str.format()方法使用关键字参数,那么将通过参数名称引用它们的值&lt;/h6&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;This {food} is {adjective}.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;food&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;spam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;adjective&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;absolutely horrible&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;spam&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;absolutely&lt;/span&gt; &lt;span class="n"&gt;horrible&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h6&gt;字段名后允许可选的':'和格式指令.这允许更好地控制如何设置值的格式.&lt;/h6&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The value of PI is approximately {0:.3f}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;PI&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;approximately&lt;/span&gt; &lt;span class="mf"&gt;3.14&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个例子将pi转为3为精度.  &lt;/p&gt;
&lt;h6&gt;':'后面跟一个整数可以限定盖子段的最小宽度.这在美化表格时十分又用&lt;/h6&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Sjored&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4217&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Jack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4098&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Dcab&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7678&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{0:10} ==&amp;gt; {1:10d}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Jack&lt;/span&gt;      &lt;span class="o"&gt;==&amp;gt;&lt;/span&gt;      &lt;span class="mi"&gt;4098&lt;/span&gt;
&lt;span class="n"&gt;Dcab&lt;/span&gt;      &lt;span class="o"&gt;==&amp;gt;&lt;/span&gt;      &lt;span class="mi"&gt;7678&lt;/span&gt;
&lt;span class="n"&gt;Sjoerd&lt;/span&gt;    &lt;span class="o"&gt;==&amp;gt;&lt;/span&gt;      &lt;span class="mi"&gt;4127&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h6&gt;如果有一个很长的格式字符串但又不想分开写,要按名字而不是位置引用变量,那么可以传入一个字典,然后使用'[]'访问&lt;/h6&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Sjoerd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4127&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4098&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Dcab&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8637678&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; &amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;Dcab: {0[Dcab]:d}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;Jack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4098&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;Sjoerd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4127&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;Dcab&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8637678&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也可以用&lt;strong&gt;'**'&lt;/strong&gt;符号将这个字典以关键字参数的方式传入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Sjoerd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4127&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4098&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Dcab&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8637678&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Jack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4098&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;Sjoerd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4127&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;Dcab&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8637678&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这种方式与内置函数vars()组合起来更为有用,该函数返回一个包含所有局部变量的字典.&lt;/p&gt;</content><category term="Python"></category></entry><entry><title>Python模块threading--多线程控制和处理</title><link href="http://ivesein.github.io/Python-module-threading.html" rel="alternate"></link><published>2016-06-15T00:00:00+08:00</published><updated>2016-06-15T00:00:00+08:00</updated><author><name>Ivesein</name></author><id>tag:ivesein.github.io,2016-06-15:/Python-module-threading.html</id><summary type="html">&lt;hr&gt;
&lt;h4&gt;threading.Thread&lt;/h4&gt;
&lt;p&gt;Thread是threading模块中非常重要的类之一.可以使用它来创建线程.&lt;br&gt;
有两种方法来创建线程:&lt;br&gt;
    * 一种是继承Thread类,重写它的run()方法.&lt;br&gt;
    * 另一种是创建一个threading.Thread对象,在它的初始化函数(_&lt;em&gt;init_&lt;/em&gt;())中将可调用对象作为参数传入.  &lt;/p&gt;
&lt;h5&gt;通过继承threading.Thread类来创建线程:&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;@summary: 初始化对象&lt;/span&gt;
&lt;span class="sd"&gt;        @param lock:所对象&lt;/span&gt;
&lt;span class="sd"&gt;        @param threadName:线程名称&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threadName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# 注意 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;hr&gt;
&lt;h4&gt;threading.Thread&lt;/h4&gt;
&lt;p&gt;Thread是threading模块中非常重要的类之一.可以使用它来创建线程.&lt;br&gt;
有两种方法来创建线程:&lt;br&gt;
    * 一种是继承Thread类,重写它的run()方法.&lt;br&gt;
    * 另一种是创建一个threading.Thread对象,在它的初始化函数(_&lt;em&gt;init_&lt;/em&gt;())中将可调用对象作为参数传入.  &lt;/p&gt;
&lt;h5&gt;通过继承threading.Thread类来创建线程:&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;@summary: 初始化对象&lt;/span&gt;
&lt;span class="sd"&gt;        @param lock:所对象&lt;/span&gt;
&lt;span class="sd"&gt;        @param threadName:线程名称&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threadName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# 注意:一定要显示的调用父类的初始化函数&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;@summary:重写父类run方法,在线程启动后执行该方法内的代码.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acquire&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;thread-&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="c1"&gt;# 确保线程都执行完毕&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上示例创建了一个Counter类,继承自threading.Thread.初始化函数接收两个参数,一个是锁对象lock,另一个是线程名threadName.&lt;br&gt;
在Counter中,重写了继承自父类的run()方法,该方法将全局变量count从1加到10000.&lt;br&gt;
接下来创建5个Counter对象,分别调用start()方法,最后打印count.&lt;br&gt;
这里对run()方法和start()做以下说明:&lt;br&gt;
    * run():继承自Thread,run()方法在线程开启后执行,可以把相关的逻辑写到run方法中.
    * start():用于启动线程.&lt;/p&gt;
&lt;h5&gt;通过创建threading.Thread对象创建线程&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;funcAdd&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;@summary:将全局变量count从1加到10000&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;
    &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acquire&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;funcAdd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Thread-&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="c1"&gt;# 确保线程都执行完毕&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上示例定义了一个funcAdd方法将全局变量count从1加到10000.然后把函数对象funcAdd作为参数传入Thread对象的构造函数创建5个Thread对象,再调用Thread对象的start()方法启动线程,执行funcAdd()方法.&lt;br&gt;
&lt;strong&gt;这里着重介绍一下threading.Thread类的初始化函数原型:&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;code&gt;def __init__(self,gruop=None,target=None,name=None,args=(),kwargs={})&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
    * 参数group是预留的,用于将来扩展;
    * 参数target是一个可调用对象(也称为活动[activity]),在线程启动后执行;
    * 参数name是线程的名字.默认为"Thread-N",N是一个数字;
    * 参数args和kwargs分别标识调用target时的参数列表和关键字参数.&lt;/p&gt;
&lt;h5&gt;Thread.join([timeout])&lt;/h5&gt;
&lt;p&gt;调用Thread.join将会使主调线程堵塞,直到调用线程运行结束或超时.参数timeout是超时时间,如果未提供参数,那么主调线程将一直堵塞到被调线程结束.  &lt;/p&gt;
&lt;h5&gt;threading.RLock和threading.Lock&lt;/h5&gt;
&lt;p&gt;在threading模块中定义了两种锁:threading.RLock和threading.Lock.&lt;br&gt;
这两种锁的主要区别是:RLock允许在同一线程中被多次acquire.而Lock却不允许这种情况.&lt;br&gt;
&lt;strong&gt;注意:如果使用RLock,那么acquire和release必须成对出现,调用了几次acquire就必须要调用几次release才能真正释放所有占用的锁.&lt;/strong&gt;  &lt;/p&gt;
&lt;h4&gt;threading.Condition&lt;/h4&gt;
&lt;p&gt;Condition可以理解为一种高级的锁,它提供了闭RLock和Lock更高级的功能,允许我们能够控制复杂的线程同步问题.&lt;br&gt;
threading.Condition在内部维护一个锁对象(默认为RLock),可以在创建Condition对象的时候把锁对象作为参数传入.Condition也提供了acquire和release方法,其含义与锁的acquire和release方法一至,其实它只是简单的调用内部锁对象的对应的方法而已.&lt;br&gt;
Condition还挺高了以下方法(&lt;strong&gt;特别注意:这些方法只有在占用了锁(acquier)之后才能调用,否则将会报RuntimeError异常.&lt;/strong&gt;):&lt;br&gt;
&lt;em&gt; Condition.wait([timeout]):wait方法释放内部所占用的锁,同时线程被挂起,直至接收到通知被唤醒或超时(如果提供了timeout参数的话).当先城北唤醒并重新占有锁的是哈,程序才会继续执行下去.
&lt;/em&gt; Condition.noitfy():唤醒一个挂起的线程(如果存在一个挂起的线程).注意,notify()方法不会释放所有占用的锁.
&lt;em&gt; Condition.notify_all()
&lt;/em&gt; Condition.notifyAll():唤醒所有挂起的线程(如果存在挂起的线程).注意,这些方法不会释放所有占用的锁&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;下面写一个捉迷藏的游戏来进一步介绍threading.Condition的基本十一用.&lt;/h4&gt;
&lt;p&gt;游戏由两个人来玩,一个藏(Hider),一个找(Seeker).&lt;br&gt;
游戏规则:&lt;br&gt;
    1. 游戏开始之后,由Seeker先把眼睛蒙上,然后通知Hider;
    2. Hider接到通知后就找地方藏起来,藏好后就通知Seeker自己藏好了,可以开始找了;
    3. Seeker得到通知后就开始找.&lt;/p&gt;
&lt;p&gt;Hider和Seeker都是独立的个体,在程序中用两个独立的线程来表示,在游戏过程中,两者之间的行为有一定时序关系,我们通过Condition来控制这种时序关系.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#file hs.py&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="c1"&gt;#定义Hider类&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Hider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cond&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="c1"&gt;#睡眠2秒,确保Seeker先运行,先蒙好眼睛&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acquire&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;      &lt;span class="c1"&gt;# 3.Hider获取线程锁,接到Seeker蒙好眼睛的通知后调用Condition.notify()方法唤醒Seeker第一步完成后挂起的锁.然后开始藏起来&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;:了我已经藏好了,快来找我吧!&amp;#39;&lt;/span&gt;     &lt;span class="c1"&gt;# 4.Hider藏好后通知Seeker自己藏好了,可以开始找了.&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;        &lt;span class="c1"&gt;# 5.通知完后待要Congdition.wait()方法释放内部占用锁,并挂起线程.&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;      &lt;span class="c1"&gt;# 9.Hider被找到后唤醒线程,然后抱怨被找到太快&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;: 唉,这么快就被你找到了.  --!&amp;#39;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;        &lt;span class="c1"&gt;# 10.抱怨完后释放锁,挂起线程.&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;# 12. 游戏结束,Hider释放线程锁&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Seeker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Seeker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cond&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;name&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acquire&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;: 我已经蒙好眼睛了,你快藏好,我要来找你了!&amp;#39;&lt;/span&gt;     &lt;span class="c1"&gt;# 1.Seeker获取线程锁,蒙好自己的眼睛并通知Hider藏起来...&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;        &lt;span class="c1"&gt;# 2.Seeker通知完后调用Condition.wait()方法释放内部占用锁,并将线程挂起.&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;      &lt;span class="c1"&gt;# 6.Seeker得知Hider藏好后唤醒线程开始找..&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;:我开始找了哦...&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;: 藏哪去了?...&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;: 我找到你了哦... 哈哈哈!&amp;#39;&lt;/span&gt;    &lt;span class="c1"&gt;# 7.一段时间后,Seeker找到了Hider&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="c1"&gt;# 8.Seeker释放内部占用锁,挂起线程&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;: 哈哈,我赢了...!!&amp;#39;&lt;/span&gt;   &lt;span class="c1"&gt;# 11.最后Seeker结果线程,开心的宣布自己赢了.并最终释放线程锁.&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;cond&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Condition&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="c1"&gt;# 创建threading.Condition对象&lt;/span&gt;

&lt;span class="n"&gt;seeker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Seeker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;seeker&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;#创建seeker玩家对象&lt;/span&gt;
&lt;span class="n"&gt;hider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Hider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hider&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="c1"&gt;#创建Hider玩家对象&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__mian__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;seeker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;hider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例结果为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ivesein&lt;/span&gt;&lt;span class="nd"&gt;@ivesein&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;UbuntuPC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;hs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; 
&lt;span class="n"&gt;seeker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;我已经蒙好眼睛了&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;你快藏好!我要来找你了&lt;/span&gt;
&lt;span class="n"&gt;hider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;我已经藏好了&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;快来找我吧&lt;/span&gt;
&lt;span class="n"&gt;seeker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;我要开始找你了&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;seeker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;藏哪去了?&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;seeker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;我找到你了哦&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="err"&gt;哈哈哈!&lt;/span&gt;
&lt;span class="n"&gt;hider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;唉&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;这么快就被你找到了&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;span class="n"&gt;seeker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;我赢了&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;threading.Timer&lt;/h4&gt;
&lt;p&gt;threading.Timer是threading.Thread的一个子类,可以在指定时间间隔后执行某个操作,下面是python手册给的一个例子:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Timer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 3秒后执行hello函数.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;一些零碎知识点&lt;/h4&gt;
&lt;h5&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;'语句&lt;/h5&gt;
&lt;p&gt;该语句块的内容只有当该文件直接执行时才会执行,当该文件是被其他问加import导入执行时是不会执行的.&lt;/p&gt;</content><category term="Python"></category></entry><entry><title>Python多线程</title><link href="http://ivesein.github.io/Python-Thread.html" rel="alternate"></link><published>2016-06-14T00:00:00+08:00</published><updated>2016-06-14T00:00:00+08:00</updated><author><name>Ivesein</name></author><id>tag:ivesein.github.io,2016-06-14:/Python-Thread.html</id><summary type="html">&lt;hr&gt;
&lt;p&gt;多线程类相当于同时执行多个不同程序,多线程运行有如下有点:
&lt;em&gt; 使用线程可以把占据长时间的程序中的任务放到后台处理,可以弹出一个进度条来显示处理进度.
&lt;/em&gt; 能提高程序的运行速度.
* 在一些需要等待的任务实现上线程就体现出优势了,比如等待用户输入,文件读写和网络数据收发等.在这种情况下可以释放内存等珍贵资源.&lt;/p&gt;
&lt;p&gt;线程在执行过程中与进程还是有区别的.每个独立的线程有一个程序运行入口,顺序执行序列和程序的出口.但是线程不能独立执行,必须依存在应用程序中,由应用程序提供多个线程执行控制.&lt;br&gt;
每个线程都有自己的一组cpu寄存器,称为线程的上下文,该上下文反映了线程上次运行该线程的cpu寄存器的状态.&lt;br&gt;
指令指针和堆栈指针寄存器是线程上下文中两个最重要的寄存器.线程总是在进程得到上下文中运行的,这些地址都用于标志拥有线程的进程地址空间中的内存.&lt;br&gt;
    * 线程可以被抢占(终端)
    * 在其他线程正在运行时,线程可以暂时搁置(睡眠),这就是线程的退让.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;学习python线程&lt;/h4&gt;
&lt;p&gt;Python中使用线程有两种方式:
    1. 函数
    2. 用类包装的线程对象&lt;/p&gt;
&lt;p&gt;&lt;code&gt;thread.start_new_thread(function,args[, kwargs])&lt;/code&gt;&lt;br&gt;
参数说明:&lt;br&gt;
    * function:线程函数
    * args:传递给线程的参数,它必须是个tuple类型.
    * kwargs:可选参数&lt;/p&gt;
&lt;p&gt;示例如下:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;import …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;hr&gt;
&lt;p&gt;多线程类相当于同时执行多个不同程序,多线程运行有如下有点:
&lt;em&gt; 使用线程可以把占据长时间的程序中的任务放到后台处理,可以弹出一个进度条来显示处理进度.
&lt;/em&gt; 能提高程序的运行速度.
* 在一些需要等待的任务实现上线程就体现出优势了,比如等待用户输入,文件读写和网络数据收发等.在这种情况下可以释放内存等珍贵资源.&lt;/p&gt;
&lt;p&gt;线程在执行过程中与进程还是有区别的.每个独立的线程有一个程序运行入口,顺序执行序列和程序的出口.但是线程不能独立执行,必须依存在应用程序中,由应用程序提供多个线程执行控制.&lt;br&gt;
每个线程都有自己的一组cpu寄存器,称为线程的上下文,该上下文反映了线程上次运行该线程的cpu寄存器的状态.&lt;br&gt;
指令指针和堆栈指针寄存器是线程上下文中两个最重要的寄存器.线程总是在进程得到上下文中运行的,这些地址都用于标志拥有线程的进程地址空间中的内存.&lt;br&gt;
    * 线程可以被抢占(终端)
    * 在其他线程正在运行时,线程可以暂时搁置(睡眠),这就是线程的退让.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;学习python线程&lt;/h4&gt;
&lt;p&gt;Python中使用线程有两种方式:
    1. 函数
    2. 用类包装的线程对象&lt;/p&gt;
&lt;p&gt;&lt;code&gt;thread.start_new_thread(function,args[, kwargs])&lt;/code&gt;&lt;br&gt;
参数说明:&lt;br&gt;
    * function:线程函数
    * args:传递给线程的参数,它必须是个tuple类型.
    * kwargs:可选参数&lt;/p&gt;
&lt;p&gt;示例如下:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;threadname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;threadname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ctime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

&lt;span class="c1"&gt;#创建两个线程&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_new_thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;print_time&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Thread-1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
    &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_new_thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;print_time&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Thread-2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Error: unable to start thread&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例结果为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ivesein&lt;/span&gt;&lt;span class="nd"&gt;@ivesein&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;UbuntuPC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;pt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; 
&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tue&lt;/span&gt; &lt;span class="n"&gt;Jun&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;
&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tue&lt;/span&gt; &lt;span class="n"&gt;Jun&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;
&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tue&lt;/span&gt; &lt;span class="n"&gt;Jun&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;
&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tue&lt;/span&gt; &lt;span class="n"&gt;Jun&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;02&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;
&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tue&lt;/span&gt; &lt;span class="n"&gt;Jun&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;04&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;
&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tue&lt;/span&gt; &lt;span class="n"&gt;Jun&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;04&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;
&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tue&lt;/span&gt; &lt;span class="n"&gt;Jun&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;06&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;
&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tue&lt;/span&gt; &lt;span class="n"&gt;Jun&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;
&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tue&lt;/span&gt; &lt;span class="n"&gt;Jun&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;
&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tue&lt;/span&gt; &lt;span class="n"&gt;Jun&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;线程的结束一般依靠线程函数的自然结束;也可以在线程函数中调用thread.exit()函数,抛出SystemExit exception信息,达到退出线程的目的.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;线程模块&lt;/h4&gt;
&lt;p&gt;Python通过两个标准库&lt;strong&gt;thread和threading&lt;/strong&gt;提供对线程的支持.thread提供了低级别,原始的线程,以及一个简单的线程锁.&lt;/p&gt;
&lt;h5&gt;thread提供以下方法:&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* threading.currentThread():返回当前的线程变量.
* threading.enumerate():返回一个包含正在运行的线程list.正在运行指线程启动后,结束前.不包括启动前和终止后的线程.
* threading.activeCount():返回正在运行的线程数量,与len(threading,enumberate())有相同结果
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;线程模块还提供了Thread类来处理线程.&lt;/h5&gt;
&lt;h5&gt;Thread类提供了以下方法:&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* run():用以表示线程活动的方法.
* start():启动线程活动.
* join([time]):等待至线程中止.这阻塞调用线程直至线程的join()方法被调用中止-正常退出或者抛出未处理异常或者可选的超时发生.
* isAlive():返回线程是否活动.
* getName():返回线程名.
* setName():设置线程名.
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;使用threading模块创建线程&lt;/h4&gt;
&lt;p&gt;使用threading模块创建线程,直接从threading.Thread继承,然后重写_&lt;em&gt;init_&lt;/em&gt;()方法和run()方法:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;exitFlag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;myThread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;           &lt;span class="c1"&gt;# 继承父类threading.Thread&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;threadID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;threadID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threarID&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Starting &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="n"&gt;print_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Exiting &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;threadname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;exitFlag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;threadname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ctime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
            &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;#创建新线程&lt;/span&gt;
&lt;span class="n"&gt;thread1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myThread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Thread-1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;thread2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myThread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Thread-2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#开启线程&lt;/span&gt;
&lt;span class="n"&gt;thread1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;thread2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Exiting Main Thread&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;后面将更进一步学习threading.Thread模块&lt;/p&gt;</content><category term="Python"></category></entry><entry><title>Python网络编程</title><link href="http://ivesein.github.io/Python-Socket.html" rel="alternate"></link><published>2016-06-12T00:00:00+08:00</published><updated>2016-06-12T00:00:00+08:00</updated><author><name>Ivesein</name></author><id>tag:ivesein.github.io,2016-06-12:/Python-Socket.html</id><summary type="html">&lt;hr&gt;
&lt;h4&gt;什么是Socket?&lt;/h4&gt;
&lt;p&gt;Socket又称套接字,应用程序通常通过"套接字"向网络发出请求或者应答网络请求,使主机间或者一台计算机上的进程间可以通讯.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;socket()函数&lt;/h4&gt;
&lt;p&gt;Python使用socket()函数来创建套接字,语法如下:&lt;br&gt;
&lt;code&gt;socket.socket([family[, tpye[, proto]]])&lt;/code&gt;  &lt;/p&gt;
&lt;h5&gt;参数&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;family:套接字家族可以使用AF_UNIX或者AF_INET&lt;/li&gt;
&lt;li&gt;type:套接字类型可以根据是面向连接还是非连接分为SOCK_STREAM或SOCK_DGRAM&lt;/li&gt;
&lt;li&gt;protocol:一般不填默认为0&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Socket对象(内建)方法&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;服务器端&lt;/th&gt;
&lt;th align="left"&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;s.bind()&lt;/td&gt;
&lt;td align="left"&gt;绑定地址(host,port)到套接字.在AF_INET下,以元组(host,port)的形式表示地址.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;s.listen()&lt;/td&gt;
&lt;td align="left"&gt;开始TPC监听.backlog指定在拒绝连接之前,操作系统可以挂起最大连接数量.最少设置为1,一般为5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;s.accept()&lt;/td&gt;
&lt;td align="left"&gt;被动接收TCP客户端连接,阻塞式等待连接到来 …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;hr&gt;
&lt;h4&gt;什么是Socket?&lt;/h4&gt;
&lt;p&gt;Socket又称套接字,应用程序通常通过"套接字"向网络发出请求或者应答网络请求,使主机间或者一台计算机上的进程间可以通讯.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;socket()函数&lt;/h4&gt;
&lt;p&gt;Python使用socket()函数来创建套接字,语法如下:&lt;br&gt;
&lt;code&gt;socket.socket([family[, tpye[, proto]]])&lt;/code&gt;  &lt;/p&gt;
&lt;h5&gt;参数&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;family:套接字家族可以使用AF_UNIX或者AF_INET&lt;/li&gt;
&lt;li&gt;type:套接字类型可以根据是面向连接还是非连接分为SOCK_STREAM或SOCK_DGRAM&lt;/li&gt;
&lt;li&gt;protocol:一般不填默认为0&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Socket对象(内建)方法&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;服务器端&lt;/th&gt;
&lt;th align="left"&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;s.bind()&lt;/td&gt;
&lt;td align="left"&gt;绑定地址(host,port)到套接字.在AF_INET下,以元组(host,port)的形式表示地址.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;s.listen()&lt;/td&gt;
&lt;td align="left"&gt;开始TPC监听.backlog指定在拒绝连接之前,操作系统可以挂起最大连接数量.最少设置为1,一般为5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;s.accept()&lt;/td&gt;
&lt;td align="left"&gt;被动接收TCP客户端连接,阻塞式等待连接到来&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;客户端&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;s.connect()&lt;/td&gt;
&lt;td&gt;主动初始化TCP服务器连接.一般address的格式化为元组(hostname,port),如果出错,返回socket.error信息.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s.connect_ex()&lt;/td&gt;
&lt;td&gt;connect()函数的扩展版本,出错返回出错码,而不抛出异常.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;公共用途&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;s.recv()&lt;/td&gt;
&lt;td&gt;接收TCP数据,以字符串形式返回,buffsize指定要接收的最大数据量.flag提供有关消息其它信息,通常可以忽略.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s.send()&lt;/td&gt;
&lt;td&gt;发送TCP数据,将string中的数据发送到连接的套接字.返回要发送的字节数量,该数量可能小于string的字节大小.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ssendall()&lt;/td&gt;
&lt;td&gt;完整发送TCP数据.将string中的数据发送到连接的套接字,但在返回之前会尝试发送所有数据.成功返回None,失败抛出异常.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s.recvfrom()&lt;/td&gt;
&lt;td&gt;接收UDP数据,与recv()类似,但返回值是(data,address).data是包含接收数据的字符串,address是发送数据的套接字地址.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s.sendto()&lt;/td&gt;
&lt;td&gt;发送UDP数据,将数据发送到套接字,address是形式为(ipaddr,port)的元组,指定远程地址.返回值是发送的字节数.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s.close()&lt;/td&gt;
&lt;td&gt;关闭套接字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s.getpeername()&lt;/td&gt;
&lt;td&gt;返回连接套接字的远程地址.返回值通常是元组(ipaddr,port).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s.getsockname()&lt;/td&gt;
&lt;td&gt;返回套接字自己的地址.通常是一个元组(ipaddr,port).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s.setsockopt(level,optname,value)&lt;/td&gt;
&lt;td&gt;设置给定套接字选项的值.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s.getsockopt(level,optname[,buflen])&lt;/td&gt;
&lt;td&gt;返回套接字选项的值.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s.settimeout(timeout)&lt;/td&gt;
&lt;td&gt;设置套接字操作的超时期,timeout是一个浮点数,单位为秒.值为None指没有超时.一般,超时期应该在创建套接字时设置,因为他们可能用于连接操作(如connect()).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s.gettimeout()&lt;/td&gt;
&lt;td&gt;返回当前超时期的值,单位为秒,如果没有设置超时期返回None.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s.fileno()&lt;/td&gt;
&lt;td&gt;返回套接字的文件描述符.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s.setblocking(flag)&lt;/td&gt;
&lt;td&gt;如果flag为0,则将套接字设为非阻塞式,否则设为阻塞式(默认值).非阻塞下,如果调用recv()法有发现任何数据,或send()调用无法立即发送数据,将引起socket.error异常.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s.makefile()&lt;/td&gt;
&lt;td&gt;创建一个与该套接字相关联的文件.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h4&gt;简单实例&lt;/h4&gt;
&lt;h5&gt;服务端&lt;/h5&gt;
&lt;p&gt;我们使用socket模块的socket()函数来创建一个socket对象.该对象通过调用一些函数来设置一个socket服务.&lt;br&gt;
首先调用&lt;strong&gt;bind(hostname,port)&lt;/strong&gt;函数来指定服务的&lt;strong&gt;port(端口)&lt;/strong&gt;,接着调用socket对象的&lt;strong&gt;accept()&lt;/strong&gt;方法,该方法等待客户端的连接,并返回connection对象,表示连接到客户端.示例如下:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;# 文件名:server.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;   &lt;span class="c1"&gt;# 导入socket模块&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;# 创建socket对象s&lt;/span&gt;
&lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gethostname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;# 获取本地主机名&lt;/span&gt;
&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12345&lt;/span&gt;    &lt;span class="c1"&gt;# 设置端口&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# bind绑定端口&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;# 等待客户端连接&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;clientsock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clientaddr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;# 建立客户端连接&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;连接地址: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clientaddr&lt;/span&gt;
    &lt;span class="n"&gt;clientsock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;你好,我是服务器端!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;clientsock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 关闭连接&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;客户端&lt;/h5&gt;
&lt;p&gt;现在写一个客户端示例连接到以上创建的服务器端.端口号为12345.&lt;br&gt;
&lt;strong&gt;socket.connect(hostname,port)&lt;/strong&gt;方法打开一个TCP连接到主机为hostname端口为port的服务器.连接后就可以从服务器段获取数据,操作完后要关闭连接.示例如下:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;# 文件名为:client.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gethostname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;prot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12345&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来打开两个终端,第一个终端运行server.py;第二个运行client.py.&lt;br&gt;
示例结果为:&lt;br&gt;
第二个终端显示  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ivesein&lt;/span&gt;&lt;span class="nd"&gt;@ivesein&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;UbuntuPC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; 
&lt;span class="err"&gt;你好&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;我是服务器端！&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后再返回第一个终端会看到以下信息:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ivesein&lt;/span&gt;&lt;span class="nd"&gt;@ivesein&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;UbuntuPC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="err"&gt;连接地址：&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50124&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;Python Internet模块&lt;/h4&gt;
&lt;p&gt;下面是python网络编程中的一些重要模块:  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;协议&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;端口号&lt;/th&gt;
&lt;th&gt;python模块&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HTTP&lt;/td&gt;
&lt;td&gt;网页访问&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;httplib,urllib,xmlrpclib&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NNTP&lt;/td&gt;
&lt;td&gt;阅读和张贴新闻文章,俗称为帖子&lt;/td&gt;
&lt;td&gt;119&lt;/td&gt;
&lt;td&gt;nntplib&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FTP&lt;/td&gt;
&lt;td&gt;文件传输&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;ftplib,urllib&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SMTP&lt;/td&gt;
&lt;td&gt;发送邮件&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;smtplib&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;POP3&lt;/td&gt;
&lt;td&gt;接收邮件&lt;/td&gt;
&lt;td&gt;110&lt;/td&gt;
&lt;td&gt;poplib&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IMAP4&lt;/td&gt;
&lt;td&gt;获取邮件&lt;/td&gt;
&lt;td&gt;143&lt;/td&gt;
&lt;td&gt;imaplib&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Telnet&lt;/td&gt;
&lt;td&gt;命令行&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;telnetlib&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gopher&lt;/td&gt;
&lt;td&gt;信息查找&lt;/td&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;td&gt;gopeerlib,urllib&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="Python"></category></entry><entry><title>Python序列遍历的技巧</title><link href="http://ivesein.github.io/Python.html" rel="alternate"></link><published>2016-06-11T00:00:00+08:00</published><updated>2016-06-11T00:00:00+08:00</updated><author><name>Ivesein</name></author><id>tag:ivesein.github.io,2016-06-11:/Python.html</id><summary type="html">&lt;hr&gt;
&lt;h6&gt;遍历一个序列时,使用$enumerate()$函数可以同时得到索引和对应的值&lt;/h6&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tac&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;toe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;tic&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;tac&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;toe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h5&gt;同时遍历两个或等多的序列,使用$zip()$函数可以成对读取元素&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;questions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;quest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;favorite color&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lancelot&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;the holy grail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;question&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;What is your {0}?  It is …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;hr&gt;
&lt;h6&gt;遍历一个序列时,使用$enumerate()$函数可以同时得到索引和对应的值&lt;/h6&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tac&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;toe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;tic&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;tac&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;toe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h5&gt;同时遍历两个或等多的序列,使用$zip()$函数可以成对读取元素&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;questions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;quest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;favorite color&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lancelot&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;the holy grail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;question&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;What is your {0}?  It is {1}.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;What&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;  &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;lancelot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;What&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;quest&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;  &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;holy&lt;/span&gt; &lt;span class="n"&gt;grail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;What&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;favorite&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;  &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h5&gt;要反向遍历一个序列,首先正向生成这个序列,然后调用$reversed()$函数&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;pirnt&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h5&gt;要按排序顺序循环一个序列,使用$sorted()$函数,返回一个新的排序的列表,同时保留源不变&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pear&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;apple&lt;/span&gt;
&lt;span class="n"&gt;banana&lt;/span&gt;
&lt;span class="n"&gt;orange&lt;/span&gt;
&lt;span class="n"&gt;pear&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h5&gt;遍历字典时,使用$iteritems()$方法可以同时得到键和对应的值&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;knights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gallabad&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;the pure&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;robin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;the brave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;knights&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;gallahad&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;pure&lt;/span&gt;
&lt;span class="n"&gt;robin&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;brave&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h5&gt;若要在循环内部修改正在遍历的序列(例如复制某些元素),建议首先制作副本.在序列上循环不会隐式的创建副本,切片表示法使这尤其方便&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;window&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;defenestrate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[:]:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;         &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;defenestrate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;window&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;defenestrate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Python"></category></entry><entry><title>Python面向对象</title><link href="http://ivesein.github.io/Python-class.html" rel="alternate"></link><published>2016-06-11T00:00:00+08:00</published><updated>2016-06-11T00:00:00+08:00</updated><author><name>Ivesein</name></author><id>tag:ivesein.github.io,2016-06-11:/Python-class.html</id><summary type="html">&lt;hr&gt;
&lt;p&gt;Python从设计之处就已经是一门面向对象语言,所以在python中创建一个类和对象是很容易的.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;面向对象技术简介&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;类(Class):用来描述具有相同的属性和方法的对象的合集.它定义了该集合中每个对象所共有的属性和方法.对象是类的实例.&lt;/li&gt;
&lt;li&gt;类变量:类变量在真个该实例化的对象中是公用的.类变量定义在类中,且在函数体之外.类变量通常不作为实例变量使用.&lt;/li&gt;
&lt;li&gt;数据成员:类变量或者实例变量用于处理类及其实例对象的相关的数据.&lt;/li&gt;
&lt;li&gt;方法重写:如果从父类继承的方法不能满足子类的需求,可以对其进行改写,这个过程叫做方法的覆盖(override),也称作方法的重写.&lt;/li&gt;
&lt;li&gt;实例变量:定义在方法中的变量,只作用于当前实例的类.&lt;/li&gt;
&lt;li&gt;继承:即一个派生类(derived class)继承基类(base class)的字段和方法.继承页允许把一个派生类的对象作为一个基类对象对待.例如.有这样一个设计:一个Dog类型的对象派生自Animal类,这是模拟"是一个(is-a)"关系(例如,Dog是一个Animal).&lt;/li&gt;
&lt;li&gt;实例化:创建一个类的实例,类的具体对象.&lt;/li&gt;
&lt;li&gt;方法:类中定义的函数.&lt;/li&gt;
&lt;li&gt;对象:通过类定义的数据结构示例.对象包括两个数据成员 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;hr&gt;
&lt;p&gt;Python从设计之处就已经是一门面向对象语言,所以在python中创建一个类和对象是很容易的.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;面向对象技术简介&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;类(Class):用来描述具有相同的属性和方法的对象的合集.它定义了该集合中每个对象所共有的属性和方法.对象是类的实例.&lt;/li&gt;
&lt;li&gt;类变量:类变量在真个该实例化的对象中是公用的.类变量定义在类中,且在函数体之外.类变量通常不作为实例变量使用.&lt;/li&gt;
&lt;li&gt;数据成员:类变量或者实例变量用于处理类及其实例对象的相关的数据.&lt;/li&gt;
&lt;li&gt;方法重写:如果从父类继承的方法不能满足子类的需求,可以对其进行改写,这个过程叫做方法的覆盖(override),也称作方法的重写.&lt;/li&gt;
&lt;li&gt;实例变量:定义在方法中的变量,只作用于当前实例的类.&lt;/li&gt;
&lt;li&gt;继承:即一个派生类(derived class)继承基类(base class)的字段和方法.继承页允许把一个派生类的对象作为一个基类对象对待.例如.有这样一个设计:一个Dog类型的对象派生自Animal类,这是模拟"是一个(is-a)"关系(例如,Dog是一个Animal).&lt;/li&gt;
&lt;li&gt;实例化:创建一个类的实例,类的具体对象.&lt;/li&gt;
&lt;li&gt;方法:类中定义的函数.&lt;/li&gt;
&lt;li&gt;对象:通过类定义的数据结构示例.对象包括两个数据成员(类变量和实例变量)和方法.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;创建类&lt;/h4&gt;
&lt;p&gt;使用class语句来创建一个类,class之后为类名并以冒号结尾.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ClassName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;类的帮助信息&amp;#39;&lt;/span&gt;        &lt;span class="c1"&gt;# 类文档字符串&lt;/span&gt;
    &lt;span class="n"&gt;class_suite&lt;/span&gt;        &lt;span class="c1"&gt;# 类体&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;类的帮助信息可以通过ClassName.__doc__查看.&lt;br&gt;
class_suite由类的成员,方法,数据属性组成.  &lt;/p&gt;
&lt;h5&gt;创建一个简单的类&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;所有员工的基类&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;empCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;salary&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;salary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salary&lt;/span&gt;
        &lt;span class="n"&gt;Emploee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empCount&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;displayCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Total Employee  &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empCount&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;displayEmployee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Name: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sefl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;,salary: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;salary&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;empCount变量是一个类变量,它的值将在这个类的所有实例之间共享.你可以在类内部或类外部使用Employee.empCount来访问.&lt;/li&gt;
&lt;li&gt;第一个方法 _&lt;em&gt;init_&lt;/em&gt;()是一种特殊的方法,被称为类的构造函数或初始化方法,当创建这个类的实例时就会调用这个方法.&lt;/li&gt;
&lt;li&gt;self代表类的实例,self在定义类的方法时是必须有的,虽然在调用时不必传入相应的参数.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;self代表类的实例,而非类&lt;/h5&gt;
&lt;p&gt;类的方法与普通的函数只有一个特别的区别:它们必须有一个额外的第一个参数名称,按照管理它的名称是self.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__class__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例结果为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10d066878&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从结果可以看出,self代表类的实例,代表当前对象的地址,而self.class则指向类.&lt;br&gt;
&lt;strong&gt;self不是python关键字,把它换成其他自定义变量名也是可以的.&lt;/strong&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;创建类的实例对象&lt;/h4&gt;
&lt;p&gt;要创建一个类的实例,你可以使用类的名称,并通过__init__方法接收参数.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#创建Employee类的第一个对象&lt;/span&gt;
&lt;span class="n"&gt;emp1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jack&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#创建Employee类的第二个对象&lt;/span&gt;
&lt;span class="n"&gt;emp2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rose&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;访问属性&lt;/h4&gt;
&lt;p&gt;可以使用(.)来访问对象的属性:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;emp1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;displayEmployee&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;emp2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;displayEmployee&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Total Employee 5d &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empCount&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你可以添加,删除,修改类的属性:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;emp1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;    &lt;span class="c1"&gt;# 添加一个&amp;#39;age&amp;#39;属性&lt;/span&gt;
&lt;span class="n"&gt;emp1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;    &lt;span class="c1"&gt;# 修改&amp;#39;age&amp;#39;属性&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;emp1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;     &lt;span class="c1"&gt;# 删除&amp;#39;age&amp;#39;属性&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你也可以使用以下函数的方式来进行设置,访问和删除属性等操作:&lt;br&gt;
&lt;em&gt; getattr(obj,name[,default]):访问对象的属性.
&lt;/em&gt; hasattr(obj,name):检查一个属性是否存在
&lt;em&gt; setattr(obj,name,value):设置一个属性.如果属性不存在,会创建一个新属性.
&lt;/em&gt; delattr(obj,name):删除属性&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Python内置类属性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;_&lt;em&gt;dict_&lt;/em&gt;:类的属性(包含一个字典,由类的数据属性组成)&lt;/li&gt;
&lt;li&gt;_&lt;em&gt;doc_&lt;/em&gt;:类的文档字符串&lt;/li&gt;
&lt;li&gt;_&lt;em&gt;name_&lt;/em&gt;:类名&lt;/li&gt;
&lt;li&gt;_&lt;em&gt;module_&lt;/em&gt;:类定义所在的模块(类的全名是'_&lt;em&gt;main_&lt;/em&gt;.className',如果类位于一个导入模块mymod中,那么className.__module__等于mymod)&lt;/li&gt;
&lt;li&gt;_&lt;em&gt;bases_&lt;/em&gt;:类的所有父类构成元素(包含了一个由所有父类组成的元组)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python内置类属性调用示例如下:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;所有员工的基类&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;empCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;salary&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;salary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salary&lt;/span&gt;
        &lt;span class="n"&gt;Emploee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empCount&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;displayCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Total Employee  &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empCount&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;displayEmployee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Name: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sefl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;,salary: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;salary&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Employee.__doc__: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Employee.__name__: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Employee.__module__: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__module__&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Employee.__bases__: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__bases__&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Employee.__dict__: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例结果为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;所有员工的基类&lt;/span&gt;
&lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;
&lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__module__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;__main__&lt;/span&gt;
&lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__bases__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__module__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;displayCount&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;displayCount&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10a939c80&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;empCount&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;displayEmployee&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;displayEmployee&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10a93caa0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\xe6\x89\x80\xe6\x9c\x89\xe5\x91\x98\xe5\xb7\xa5\xe7\x9a\x84\xe5\x9f\xba\xe7\xb1\xbb&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__init__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10a939578&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;python对象销毁(垃圾回收)&lt;/h4&gt;
&lt;p&gt;python使用了引用计数这一简单技术来跟踪和回收垃圾.&lt;br&gt;
在python内部记录着所有使用中的对象各有多少引用.&lt;br&gt;
一个内部跟踪变量,称为一个引用计数器.&lt;br&gt;
对象被创建时,就创建了一个引用计数器,当这个对象不再需要时,也就是说这个对象的引用计数变为0时,它被垃圾回收.但是回收不是"立即"的,由解释器在适当的时机,将垃圾对象占用的内存空间回收.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;    &lt;span class="c1"&gt;# 创建对象 &amp;lt;40&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;     &lt;span class="c1"&gt;# 增加引用, &amp;lt;40&amp;gt;的计数&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="c1"&gt;# 增加引用, &amp;lt;40&amp;gt;的计数&lt;/span&gt;

&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;     &lt;span class="c1"&gt;# 减少引用 &amp;lt;40&amp;gt; 的计数&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;   &lt;span class="c1"&gt;# 减少引用 &amp;lt;40&amp;gt; 的计数&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# 减少引用 &amp;lt;40&amp;gt; 的计数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;垃圾回收机制不仅针对引用计数为0的对象,同样也可以处理循环引用的情况.循环引用指的是,两个对象相互引用,但是没有其他变量引用他们.这种情况下,仅使用引用计数是不够的.python的垃圾收集器实际上是一个引用计数器和一个循环垃圾收集器.作为引用计数的补充,垃圾收集器也会留心被分配的总量很大(即未通过引用计数销毁的那些)的对象.在这种情况下,解释器会暂停下来,试图清理所有未引用的循环.&lt;br&gt;
实例:&lt;br&gt;
析够函数_&lt;em&gt;del_&lt;/em&gt;()在对象销毁时被调用  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__del__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;class_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__class__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;class_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;销毁&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;pt1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;pt2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pt1&lt;/span&gt;
&lt;span class="n"&gt;pt3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pt1&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pt1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pt2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pt3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;pt1&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;pt2&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;pt3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例结果为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;3083401324&lt;/span&gt; &lt;span class="mi"&gt;3083401324&lt;/span&gt; &lt;span class="mi"&gt;3083401324&lt;/span&gt;
&lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="err"&gt;销毁&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;注意:通常你需要在单独的文件中定义一个类&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;类的继承&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;继承语法:class 派生类名(基类名)//...基类名写在括号里,基本类是在类定义的是哈,在元组中指明的.&lt;/strong&gt;&lt;br&gt;
在python中继承的一些特点:&lt;br&gt;
&lt;em&gt; 1:在继承中基类的构造方法(_&lt;em&gt;init_&lt;/em&gt;())不会被自动调用,它需要在其派生类的构造方法中亲自专门调用.&lt;br&gt;
&lt;/em&gt; 2:在调用基类方法时.需要加上级类的类名前缀,且需要带上self参数.区别在于类中调用普通函数时并不需要带上self参数.
* 3:Python在嗯是首先查找对应类型的方法,如果它不能在派生类中找到对应的方法,它才开始到基类中诸葛查找.(现在本类中查找调用的方法,找不到才去基类中查找) &lt;/p&gt;
&lt;p&gt;如果在继承元组中列了一个以上的父类,那么它被称作&lt;strong&gt;多重继承&lt;/strong&gt;.&lt;br&gt;
你可以使用issubclass()或isinstance()方法来检测:&lt;br&gt;
&lt;em&gt; issubclass():判断一个类是另一个类的子类或者子孙类(issubclass(sub,sup))
&lt;/em&gt; isinstance(obj,class):如果obj是class类的实例对象或者是一个class子类的实例对象则返回true&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;类的属性与方法&lt;/h4&gt;
&lt;h5&gt;类的私有属性&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;__private_attrs:&lt;/strong&gt;两个下划线开头,声明该属性为类私有属性,不能在类的外部被使用或直接访问.在类内部的方法中使用时用&lt;strong&gt;self.__private_attrs&lt;/strong&gt;.  &lt;/p&gt;
&lt;h5&gt;类的方法&lt;/h5&gt;
&lt;p&gt;在类的内部,使用&lt;strong&gt;def&lt;/strong&gt;关键字可以为类定义一个方法,与一般函数定义不同,类方法必须包含参数&lt;strong&gt;self&lt;/strong&gt;,而且为第一个参数.  &lt;/p&gt;
&lt;h5&gt;类的私有方法&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;__private_method:&lt;/strong&gt;两个下划线开头,声明该方法为私有方法,不能在类外部调用,在类内部调用时使用**self.__private_method  &lt;/p&gt;
&lt;p&gt;python不允许实例化的类访问私有数据,但你可以使用&lt;strong&gt;object._className_attrName&lt;/strong&gt;访问类的私有属性&lt;/p&gt;</content><category term="Python"></category></entry><entry><title>Python正则表达式</title><link href="http://ivesein.github.io/Python-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8Fmoeditor.html" rel="alternate"></link><published>2016-06-10T09:10:00+08:00</published><updated>2016-06-10T09:10:00+08:00</updated><author><name>Ivesein</name></author><id>tag:ivesein.github.io,2016-06-10:/Python-正则表达式moeditor.html</id><summary type="html">&lt;hr&gt;
&lt;p&gt;正则表达式是一个特殊的字符序列，它能帮你检查一个字符串是否与某种模式匹配。&lt;br&gt;
Python自1.5版本起增加了re模块，它提供Perl风格的正则表达式模式。&lt;br&gt;
re模块使Python语言拥有全部的正则表达式功能。&lt;br&gt;
compile函数根据一个模式字符串和可选的标志参数生成一个正则表达式对象，该对象拥有一系列方法用于正则表达式匹配和替换。&lt;br&gt;
re模块页提供了与这些方法功能完全一至的函数，这些函数使用一个模式字符串作为它们的第一个参数。  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;re.match函数&lt;/h4&gt;
&lt;p&gt;re.match尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none&lt;br&gt;
函数语法：&lt;code&gt;re.match(pattern,string,flags = 0)&lt;/code&gt;&lt;br&gt;
函数参数说明：&lt;br&gt;
pattern ：匹配的正则表达式&lt;br&gt;
string：要匹配的字符串&lt;br&gt;
flags：标志位&lt;br&gt;
匹配成功re.match方法返回一个匹配的对象，否则返回None。&lt;br&gt;
我们可以使用group（num）或groups（）匹配对象函数来获取匹配表达式&lt;br&gt;
示例1:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;#-*- coding: UTF-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;www …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;hr&gt;
&lt;p&gt;正则表达式是一个特殊的字符序列，它能帮你检查一个字符串是否与某种模式匹配。&lt;br&gt;
Python自1.5版本起增加了re模块，它提供Perl风格的正则表达式模式。&lt;br&gt;
re模块使Python语言拥有全部的正则表达式功能。&lt;br&gt;
compile函数根据一个模式字符串和可选的标志参数生成一个正则表达式对象，该对象拥有一系列方法用于正则表达式匹配和替换。&lt;br&gt;
re模块页提供了与这些方法功能完全一至的函数，这些函数使用一个模式字符串作为它们的第一个参数。  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;re.match函数&lt;/h4&gt;
&lt;p&gt;re.match尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none&lt;br&gt;
函数语法：&lt;code&gt;re.match(pattern,string,flags = 0)&lt;/code&gt;&lt;br&gt;
函数参数说明：&lt;br&gt;
pattern ：匹配的正则表达式&lt;br&gt;
string：要匹配的字符串&lt;br&gt;
flags：标志位&lt;br&gt;
匹配成功re.match方法返回一个匹配的对象，否则返回None。&lt;br&gt;
我们可以使用group（num）或groups（）匹配对象函数来获取匹配表达式&lt;br&gt;
示例1:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;#-*- coding: UTF-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;www&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;www.baidu.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  &lt;span class="c1"&gt;# 在起始位置匹配  &lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;www&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;www.baidu.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;         &lt;span class="c1"&gt;# 不在起始位置匹配&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上示例运行结果为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="bp"&gt;None&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例2:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;#-*- coding:UTF-8 -*-  &lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;  

&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Cats are smart than dogs&amp;quot;&lt;/span&gt;  

&lt;span class="n"&gt;matchObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(.*) are (.*?) .*, line, re.M|re.I)  &lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;matchObj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;matchObj.group() :&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;matchObj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;matchObj.group(1) :&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;matchObj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;matchObj.group(2) :&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;matchObj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;No match!!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上示例执行结果为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;matchObj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Cats&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;smarter&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;dogs&lt;/span&gt;  
&lt;span class="n"&gt;matchObj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Cats&lt;/span&gt;  
&lt;span class="n"&gt;matchObj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;smarter&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;re.search&lt;/h4&gt;
&lt;p&gt;re.search扫描真个字符串并返回一个成功的匹配:&lt;br&gt;
&lt;code&gt;re.search(pattern, string, flags = 0)&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;参数描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;pattern&lt;/td&gt;
&lt;td&gt;匹配的正则表达式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;要匹配的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flags&lt;/td&gt;
&lt;td&gt;标志位,用于控制正则表达式,如:是否区分大小写,多行匹配等等&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;匹配成功re.search()方法返回一个匹配的对象,否则返回None.&lt;br&gt;
可以使用group(num)或groups()匹配对象函数来获取匹配表达式:  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;匹配对象方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;group(num = 0)&lt;/td&gt;
&lt;td&gt;匹配的真个个表达是的字符串,group()可以一次输入多个组号,在这种情况下它将发挥一个包含那些组所对应值的元组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;groups()&lt;/td&gt;
&lt;td&gt;返回一个包含所有小组字符串的元组,从1到所含的小组号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;示例1:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;#-*- coding: UTF-8 -*-  &lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;www&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;www.baidu.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  &lt;span class="c1"&gt;# 在起始位置匹配  &lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;www.baidu.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;         &lt;span class="c1"&gt;# 不在起始位置匹配&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例结果为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例2:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Cats are smarter than dogs&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;searchObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;(.*) are (.*?) .*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;searchObj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;searchObj.group() : &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;searchObj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;searchObj.group(1) : &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;searchObj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;searchObj.group(2) : &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;searchObj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Nothing Found!!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例结果为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;searchObj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;Cats&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;smarter&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;dogs&lt;/span&gt;
&lt;span class="n"&gt;searchObj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;Cats&lt;/span&gt;
&lt;span class="n"&gt;searchObj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;smarter&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;re.match与re.search的区别&lt;/h4&gt;
&lt;p&gt;re.match只匹配字符串的开始,如果字符串开始不复合正则表达式,则匹配失败,函数返回None;而re.search匹配整个字符串,知道找到一个匹配值.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Cats are smarter than dogs&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;matchObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dogs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;matchObj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;match --&amp;gt; matchObj.group(): &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;matchObj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Not Match!!&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;matchObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dogs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;matchObj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;search --&amp;gt; matchObj.group(): &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;matchObj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Not Search!!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例结果为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;Match&lt;/span&gt;&lt;span class="err"&gt;!!&lt;/span&gt;
&lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;matchObj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;dogs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;检索和替换&lt;/h4&gt;
&lt;p&gt;Python的re模块提供了re.sub用于替换字符串中的匹配项:&lt;br&gt;
&lt;code&gt;re.sub(pattern, repl, string, count = 0, flags = 0)&lt;/code&gt;&lt;br&gt;
参数:&lt;br&gt;
&lt;em&gt; pattern: 曾则中的模式字符串&lt;br&gt;
&lt;/em&gt; repl: 替换的字符串,也可以为一个函数
&lt;em&gt; string: 要被查找替换的原始字符串
&lt;/em&gt; count: 模式匹配后替换的最大次数,默认0代表替换所有的匹配&lt;/p&gt;
&lt;p&gt;示例:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;#-*- coding: UTF-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="n"&gt;phone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;138-0000-0001  # 这是一个电话号码&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;#删除字符串中的python注释&lt;/span&gt;
&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#.*$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;电话号码是: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
&lt;span class="c1"&gt;#删除非数字(-)的字符串&lt;/span&gt;
&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\D&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;电话号码是: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例结果为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;电话号码是&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;138&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;0000&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;0001&lt;/span&gt;
&lt;span class="err"&gt;电话号码是&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;13800000001&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;repl 参数是一个函数&lt;/h4&gt;
&lt;p&gt;以下示例中将字符串中的匹配的数字乘以2:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;#-*- coding: UTF-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="c1"&gt;#将匹配的数字乘以2&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A23G4HFD567&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(?P&amp;lt;value&amp;gt;\d+)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例结果为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;A46G8HFD1134&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;正则表达式的修饰符 - 可选标志&lt;/h4&gt;
&lt;p&gt;正则表达式可以包含一些可选的标志修饰符来控制匹配的模式,修饰符被指定为一个可选的标志;多个标志可以通过按位或( | )来指定,如re.M|re.I被设置成M和I标志:  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;修饰符&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;re.I&lt;/td&gt;
&lt;td&gt;是皮配对大小写不敏感&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;re.L&lt;/td&gt;
&lt;td&gt;做本地化识别(locale-aware)匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;re.M&lt;/td&gt;
&lt;td&gt;多行匹配,影响^和$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;re.S&lt;/td&gt;
&lt;td&gt;使.匹配包括换行在内的所有字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;re.U&lt;/td&gt;
&lt;td&gt;根据Unicode字符集解析字符.这个标志影响\w,\W,\b,\B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;re.X&lt;/td&gt;
&lt;td&gt;该标志通过给予你更灵活的格式以便你将正则表达式写的更易于理解&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h4&gt;正则表达式模式&lt;/h4&gt;
&lt;p&gt;模式字符串使用特殊的语法来表示一个正则表达式:&lt;br&gt;
字母和数字标识他们自身.一个正则表达式模式中的字母和数字匹配同样的字符串.&lt;br&gt;
多数字母和数字前面加一个反斜杠时会用偶不同的含义.&lt;br&gt;
标点符号只有被转义时才匹配自身,否则它们标识特殊含义.&lt;br&gt;
反斜杠本身需要使用反斜杠转义.&lt;br&gt;
由于正则表达式通常都包含反斜杠,所以你最好使用原始字符串来表达它们.&lt;br&gt;
模式元素(如 r'/t',等价于 '//t')匹配相应的特殊字符.&lt;br&gt;
如果你使用模式的同时提供了可选的标志参数,某些模式元素的含义会改变.&lt;/p&gt;
&lt;p&gt;模式  描述
^   匹配字符串的开头
$   匹配字符串的末尾。
.   匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。
[...]   用来表示一组字符,单独列出：[amk] 匹配 'a'，'m'或'k'
[^...]  不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。
re* 匹配0个或多个的表达式。
re+ 匹配1个或多个的表达式。
re? 匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式
re{ n}&lt;br&gt;
re{ n,} 精确匹配n个前面表达式。
re{ n, m}   匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式
a| b    匹配a或b
(re)    G匹配括号内的表达式，也表示一个组
(?imx)  正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。
(?-imx) 正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。
(?: re) 类似 (...), 但是不表示一个组
(?imx: re)  在括号中使用i, m, 或 x 可选标志
(?-imx: re) 在括号中不使用i, m, 或 x 可选标志
(?#...) 注释.
(?= re) 前向肯定界定符。如果所含正则表达式，以 ... 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。
(?! re) 前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功
(?&amp;gt; re) 匹配的独立模式，省去回溯。
\w  匹配字母数字及下划线
\W  匹配非字母数字及下划线
\s  匹配任意空白字符，等价于 [\t\n\r\f].
\S  匹配任意非空字符
\d  匹配任意数字，等价于 [0-9].
\D  匹配任意非数字
\A  匹配字符串开始
\Z  匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。c
\z  匹配字符串结束
\G  匹配最后匹配完成的位置。
\b  匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\b' 可以匹配"never" 中的 'er'，但不能匹配 "verb" 中的 'er'。
\B  匹配非单词边界。'er\B' 能匹配 "verb" 中的 'er'，但不能匹配 "never" 中的 'er'。
\n, \t, 等.  匹配一个换行符。匹配一个制表符。等
\1...\9 匹配第n个分组的子表达式。
\10 匹配第n个分组的子表达式，如果它经匹配。否则指的是八进制字符码的表达式。&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;正则表达式实例&lt;/h4&gt;
&lt;h5&gt;字符匹配&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;实例&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;python&lt;/td&gt;
&lt;td&gt;匹配"python"&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5&gt;字符类&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;实例&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[Pp]ython&lt;/td&gt;
&lt;td&gt;匹配"Python"或"python"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rub[ye]&lt;/td&gt;
&lt;td&gt;匹配"ruby"或"rube"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[aeiou]&lt;/td&gt;
&lt;td&gt;匹配中括号内的任意一个字母&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[0-9]&lt;/td&gt;
&lt;td&gt;匹配任何数字.类似于[0123456789]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[a-z]&lt;/td&gt;
&lt;td&gt;匹配任何小写字母&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[A-Z]&lt;/td&gt;
&lt;td&gt;匹配任何大写字母&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[a-zA-Z0-9]&lt;/td&gt;
&lt;td&gt;匹配任何字母和数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[^aeiou]&lt;/td&gt;
&lt;td&gt;除了aeiou外的所有字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[^0-9]&lt;/td&gt;
&lt;td&gt;除了数字以外的所有字符&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5&gt;特殊字符类&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;实例&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;匹配除"\n"之外的任何单个字符.要匹配包括'\n'在内的任何字符,请使用象[.\n]的模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\d&lt;/td&gt;
&lt;td&gt;匹配一个数字字符,等价于[0-9]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\D&lt;/td&gt;
&lt;td&gt;匹配一个非数字字符,等价于[^0-9]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\s&lt;/td&gt;
&lt;td&gt;匹配任何空白字符,包括空格,制表符,换页符等等.等价于[\f\n\r\t\v]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\S&lt;/td&gt;
&lt;td&gt;匹配任何非空字符,等价于[^\f\n\r\t\v]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\w&lt;/td&gt;
&lt;td&gt;匹配包括下划线的任何单词字符.等价于[A-Za-z0-9_]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\W&lt;/td&gt;
&lt;td&gt;匹配任何非单词字符.等价于[^A-Za-z0-9_]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="Python"></category></entry><entry><title>Python文件 I/O</title><link href="http://ivesein.github.io/Python-I/O.html" rel="alternate"></link><published>2016-06-10T00:00:00+08:00</published><updated>2016-06-10T00:00:00+08:00</updated><author><name>Ivesein</name></author><id>tag:ivesein.github.io,2016-06-10:/Python-I/O.html</id><summary type="html">&lt;hr&gt;
&lt;h4&gt;读取键盘输入&lt;/h4&gt;
&lt;p&gt;Python提供了两个内置函数从标准输入读入一行文本,默认的标准输入是键盘.&lt;br&gt;
    * raw_input
    * input&lt;/p&gt;
&lt;h5&gt;raw_input函数&lt;/h5&gt;
&lt;p&gt;raw_input()函数从标准输入读取一行,并返回一个字符串(会去掉结尾的换行符).  &lt;/p&gt;
&lt;h5&gt;input函数&lt;/h5&gt;
&lt;p&gt;input()函数和raw_input()函数基本相似,但是input可以接收一个python表达式为输入,并将运算结果返回.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;#-*- coidng: UTF-8 -*-&lt;/span&gt;

&lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;请输入: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;你输入的内容是: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这回产生如下的对应输入的结果:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;请输入&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="err"&gt;你输入的内容是&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;raw_input和input的区别在于,raw_input读到什么返回什么;而input会对读到的内容里的表达式做运算再返回&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;打开和关闭文件操作&lt;/h4&gt;
&lt;p&gt;python提供了必要的函数和方法进行默认情况下的文件基本操作.你可以使用file对象做大部分的文件操作.  &lt;/p&gt;
&lt;h5&gt;open …&lt;/h5&gt;</summary><content type="html">&lt;hr&gt;
&lt;h4&gt;读取键盘输入&lt;/h4&gt;
&lt;p&gt;Python提供了两个内置函数从标准输入读入一行文本,默认的标准输入是键盘.&lt;br&gt;
    * raw_input
    * input&lt;/p&gt;
&lt;h5&gt;raw_input函数&lt;/h5&gt;
&lt;p&gt;raw_input()函数从标准输入读取一行,并返回一个字符串(会去掉结尾的换行符).  &lt;/p&gt;
&lt;h5&gt;input函数&lt;/h5&gt;
&lt;p&gt;input()函数和raw_input()函数基本相似,但是input可以接收一个python表达式为输入,并将运算结果返回.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;#-*- coidng: UTF-8 -*-&lt;/span&gt;

&lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;请输入: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;你输入的内容是: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这回产生如下的对应输入的结果:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;请输入&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="err"&gt;你输入的内容是&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;raw_input和input的区别在于,raw_input读到什么返回什么;而input会对读到的内容里的表达式做运算再返回&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;打开和关闭文件操作&lt;/h4&gt;
&lt;p&gt;python提供了必要的函数和方法进行默认情况下的文件基本操作.你可以使用file对象做大部分的文件操作.  &lt;/p&gt;
&lt;h5&gt;open()函数&lt;/h5&gt;
&lt;p&gt;你必须先用python内置的open()函数来打开一个文件,创建一个file对象来对打开的文件进行读写操作:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;access_mode&lt;/span&gt;&lt;span class="p"&gt;][,&lt;/span&gt; &lt;span class="n"&gt;buffering&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;各个参数的细节如下:&lt;br&gt;
&lt;em&gt; file_name:改变量是要打开的文件名称的字符串值.
&lt;/em&gt; access_mode:该变量决定了打开文件的模式(只读,只写,读写,追加等等).所有可见值见如下的完全列表.这个参数是非强制的,默认文件访问模式为只读(r).&lt;br&gt;
* buffering:如果该参数被设置为0,就不会有寄存.如果该参数为1,访问文件时会寄存.如果将该参数设置为大于1的整数,表明了这就是寄存区的缓冲大小.如果取负值,寄存区的缓冲区大小则为系统默认.  &lt;/p&gt;
&lt;p&gt;不同模式打开文件的完全类表:  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;模式access_mode&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;r&lt;/td&gt;
&lt;td&gt;只读,文件指针放在文件开头.这是默认打开模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rb&lt;/td&gt;
&lt;td&gt;二进制格式打开,文件指针放在文件开头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;r+&lt;/td&gt;
&lt;td&gt;读写打开,文件指针放在文件开头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rb+&lt;/td&gt;
&lt;td&gt;二进制格式读写打开,文件指针放在文件开头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;w&lt;/td&gt;
&lt;td&gt;打开只用于写入,如果存在则将其覆盖,如果不存在,创建新文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wb&lt;/td&gt;
&lt;td&gt;以二进制打开只用与写,存在则覆盖,不存在则创建新文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;w+&lt;/td&gt;
&lt;td&gt;打开文件用于读写.如果存在则覆盖,不存在则创建新文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wb+&lt;/td&gt;
&lt;td&gt;以二进制打开文件用于读写.存在则覆盖,不存在创建新文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;打开文件追加.如果文件存在,指针放于文件结尾,不存在创建新文件写入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ab&lt;/td&gt;
&lt;td&gt;以二进制格式打开文件追接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a+&lt;/td&gt;
&lt;td&gt;打开文件用于读写.如果文件存在,指针放于文件结尾.不存在创建新文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ab+&lt;/td&gt;
&lt;td&gt;以二进制格式打开文件用于读写,文件存在指针放于文件结尾追加写.不存在则创建新文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h4&gt;file对象的属性&lt;/h4&gt;
&lt;p&gt;一个文件被打开后,你有一个file对象接收该文件的各种信息.&lt;br&gt;
以下是和file对象相关的所有属性列表:  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;file.closed&lt;/td&gt;
&lt;td&gt;文件已关闭返回true,否则返回false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;file.mode&lt;/td&gt;
&lt;td&gt;返回打开文件的访问模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;file.name&lt;/td&gt;
&lt;td&gt;返回打开的文件的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;file.softspace&lt;/td&gt;
&lt;td&gt;如果用print输出后,必须跟一个空格符则返回false,否则返回true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h4&gt;close()方法&lt;/h4&gt;
&lt;p&gt;file对象的close()方法刷新缓冲区里任何还没写入的信息,并关闭该文件,这之后便不能再进行写入操作.&lt;br&gt;
当一个文件对象的引用被重新指定给另一个文件时,python会关闭之前的文件.用close()方法关闭使用完的文件是一个很好的习惯:&lt;br&gt;
&lt;code&gt;fileobject.close()&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;读写文件&lt;/h4&gt;
&lt;p&gt;file对象提供了一系列方法来访问文件,比如read()和write()方法来读取和写入文件.  &lt;/p&gt;
&lt;h5&gt;write()方法&lt;/h5&gt;
&lt;p&gt;write()方法可将任何字符串写入一个打开的文件.&lt;strong&gt;需要重点注意的是:python字符串可以是二进制数据,而不仅仅是文字.&lt;/strong&gt;&lt;br&gt;
write()方法不会在字符串的结尾添加换行符('\n'),示例如下:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;

&lt;span class="c1"&gt;#打开一个文件&lt;/span&gt;
&lt;span class="n"&gt;fo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;你好python!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;你好世界!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#关闭打开的文件&lt;/span&gt;
&lt;span class="n"&gt;fo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;read()方法&lt;/h5&gt;
&lt;p&gt;read()方法从一个打开的文件中读取一个字符串.示例如下:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="c1"&gt;#打开一个文件&lt;/span&gt;
&lt;span class="n"&gt;fo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;r+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;读取到的字符串是: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

&lt;span class="c1"&gt;#关闭打开的文件&lt;/span&gt;
&lt;span class="n"&gt;fo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里传入的参数是要从文件中读取的字符串的字节计数.该方法从文件的开头开始读取,如果没有传入参数,它会尝试读取尽可能多的内容,很可能是直到文件的末尾.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;文件定位&lt;/h4&gt;
&lt;p&gt;tell()方法告诉你文件内的当前位置,也就是下次读写会发生在文件开头这么多字节之后.&lt;br&gt;
seek(offset [,from])方法改变当前文件的位置,offset变量表示要移动的字节数,from变量指定开始移动字节的参考位置,如果from为0,指将文件的开头作为移动的参考位置,如果为1,则使用当前位置为移动参考位置,如果为2则从末尾开始移动.&lt;br&gt;
示例:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="n"&gt;fo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;r+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;读到的字符串是: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

&lt;span class="c1"&gt;#查找当前位置&lt;/span&gt;
&lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tell&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;当前位置是: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;

&lt;span class="c1"&gt;#把指针再重新定位到文件的开头&lt;/span&gt;
&lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pring&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;重新读取字符串: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

&lt;span class="c1"&gt;#关闭打开的文件&lt;/span&gt;
&lt;span class="n"&gt;fo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Python"></category></entry><entry><title>Python 函数</title><link href="http://ivesein.github.io/Python-Function.html" rel="alternate"></link><published>2016-06-08T00:00:00+08:00</published><updated>2016-06-08T00:00:00+08:00</updated><author><name>Ivesein</name></author><id>tag:ivesein.github.io,2016-06-08:/Python-Function.html</id><summary type="html">&lt;hr&gt;
&lt;p&gt;函数是组织好的,可重复使用的,用来实现单一或相关功能的代码段.&lt;br&gt;
函数能提高应用的模块性,和代码的重复利用率.&lt;br&gt;
Python提供了很多内建函数,比如print().你也可以自己创建函数,这被叫做自定义函数.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;定义一个函数&lt;/h4&gt;
&lt;p&gt;你可以定义一个有自己想要的功能的函数,以下是简单的规则:&lt;br&gt;
&lt;em&gt; 函数的代码块以&lt;strong&gt; def &lt;/strong&gt;关键字开头,后接函数标识符名称和园括号().
&lt;/em&gt; 任何传入参数和自变量必须放在园括号中间,园括号之间可以用于定义参数.
&lt;em&gt; 函数的第一行语句可以选择性的使用文档字符串--用于存放函数说明.
&lt;/em&gt; 函数内容以冒号起始,并且缩进.
* &lt;strong&gt;return [表达式]&lt;/strong&gt; 结束函数,选择性的返回一个值给调用方.不带表达式的return相当于返回None.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;自定义函数的语法&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;functionname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;函数_文档字符串&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;function_suite&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;默认情况下,参数值和参数名称是按函数声明中定义的顺序匹配起来的.  &lt;/p&gt;
&lt;h4&gt;实例&lt;/h4&gt;
&lt;p&gt;以下为一个简单的python函数,它将一个字符串作为传入参数,再打印到标准显示设备上.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;打印传入的字符串到标准显示设备上&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;函数调用&lt;/h4&gt;
&lt;p&gt;定义一个函数只给了函数一个名称,制定了函数包含的参数 …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;p&gt;函数是组织好的,可重复使用的,用来实现单一或相关功能的代码段.&lt;br&gt;
函数能提高应用的模块性,和代码的重复利用率.&lt;br&gt;
Python提供了很多内建函数,比如print().你也可以自己创建函数,这被叫做自定义函数.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;定义一个函数&lt;/h4&gt;
&lt;p&gt;你可以定义一个有自己想要的功能的函数,以下是简单的规则:&lt;br&gt;
&lt;em&gt; 函数的代码块以&lt;strong&gt; def &lt;/strong&gt;关键字开头,后接函数标识符名称和园括号().
&lt;/em&gt; 任何传入参数和自变量必须放在园括号中间,园括号之间可以用于定义参数.
&lt;em&gt; 函数的第一行语句可以选择性的使用文档字符串--用于存放函数说明.
&lt;/em&gt; 函数内容以冒号起始,并且缩进.
* &lt;strong&gt;return [表达式]&lt;/strong&gt; 结束函数,选择性的返回一个值给调用方.不带表达式的return相当于返回None.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;自定义函数的语法&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;functionname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;函数_文档字符串&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;function_suite&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;默认情况下,参数值和参数名称是按函数声明中定义的顺序匹配起来的.  &lt;/p&gt;
&lt;h4&gt;实例&lt;/h4&gt;
&lt;p&gt;以下为一个简单的python函数,它将一个字符串作为传入参数,再打印到标准显示设备上.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;打印传入的字符串到标准显示设备上&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;函数调用&lt;/h4&gt;
&lt;p&gt;定义一个函数只给了函数一个名称,制定了函数包含的参数,和代码快结构.&lt;br&gt;
这个函数的基本结构完成以后末,可以通过另一个函数调用执行,也可以直接从Python提示符执行.&lt;br&gt;
如下示例调用了printme()函数:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;#-*- coding: UTF-8 -*-&lt;/span&gt;

&lt;span class="c1"&gt;#定义函数&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;打印任何传入的字符串&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="c1"&gt;#调用函数&lt;/span&gt;
&lt;span class="n"&gt;printme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;我要调用用户自定义函数&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;printme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;再次调用这个函数&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例结果为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;我要调用用户自定义函数&lt;/span&gt;
&lt;span class="err"&gt;再次调用这个函数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;参数传递&lt;/h4&gt;
&lt;p&gt;在python中,类型属于对象,变量是没有类型的:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;abcd&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上代码中,[1, 2, 3]是List类型的,"abcd"是String类型的,而变量a是没有类型的,她仅仅是一个对象的引用(一个指针),可以使List类型对象,也可以指向String类型对象.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;可更改(mutable)和不可更改(immutable)对象&lt;/h4&gt;
&lt;p&gt;在python中,string,tuples和numbers是不可更改的对象,而list,dict等则是可以修改的对象.&lt;br&gt;
&lt;em&gt; &lt;strong&gt;不可变类型&lt;/strong&gt;:变量赋值 a=5 后再赋值 a=10,这里实际是新生成一个int对象10,再让a指向它,而5被丢弃,不是改变a的值,相当于生成了a.&lt;br&gt;
&lt;/em&gt; &lt;strong&gt;可变类型&lt;/strong&gt;:变量赋值 la=[1,2,3,4]后再赋值 la=[2]=5 则是将list la的第二个元素值更改,本身la没有改动,只是其内部的一部分值被修改了.  &lt;/p&gt;
&lt;h5&gt;Pyhton函数的参数传递:&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不可变类型&lt;/strong&gt;:类似c++的值传递,如整数,字符串,元组.比如fun(a) ,传递的只是a的值,没有影响a对象本身.比如在 fun(a) 内部修改a的值,只是修改另一个复制的对象,不会影响a本身.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可变类型&lt;/strong&gt;:类似c++的引用传递,如列表,字典.比如 fun(la) 是将la真正的值传过取,修改后fun外部的la也会受影响.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;python中一切都是对象,严格意义我们不能说值传递还是引用传递,我们应该说传不可变对象和传可变对象.  &lt;/p&gt;
&lt;h5&gt;python传不可变对象实例:&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;#-*- coding: UTF-8 -*-&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ChangeInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;ChangeInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;           &lt;span class="c1"&gt;# 结果是2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例中的int对象2,指向它的变量b,在传递给ChangeInt函数时,按传值的方式赋值了变量b,a和b都指向了同一个int对象,在a=10时,则新生成一个int对象10,并让a指向它.  &lt;/p&gt;
&lt;h5&gt;python传可变对象实例&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;#-*- coding: UTF-8 -*-&lt;/span&gt;

&lt;span class="c1"&gt;#定义函数&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;changeme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mylist&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;修改传入的列表&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;mylist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;函数内取值: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mylist&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="c1"&gt;#调用changme()函数&lt;/span&gt;
&lt;span class="n"&gt;mylist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;changme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mylist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;函数外取值: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mylist&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例中传入函数的和在末尾添加新内容的对象用的是同一个引用,结果为下:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;函数内取值&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="err"&gt;函数外取值&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;函数的参数&lt;/h4&gt;
&lt;p&gt;以下是调用函数时可使用的正式参数类型:&lt;br&gt;
    1. 必备参数
    2. 关键字参数
    3. 默认参数
    4. 不定长参数&lt;/p&gt;
&lt;h5&gt;1.必备参数&lt;/h5&gt;
&lt;p&gt;必备参数以正确的顺序传入函数.调用时的数量必须和声明时的一样.&lt;br&gt;
调用printme()函数,你必须传入一个参数,否则会出现语法错误.  &lt;/p&gt;
&lt;h5&gt;2.关键字参数&lt;/h5&gt;
&lt;p&gt;关键字参数和函数调用紧密,函数调用使用关键字参数来确定传入的参数.&lt;br&gt;
使用关键字参数允许函数调用参数的顺序与声明时不一致,因为python解释器能够用参数名匹配参数值.&lt;br&gt;
以下示例在pringme()函数调用时使用参数名:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="n"&gt;printme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例结果为:&lt;br&gt;
&lt;code&gt;my string&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;关键字参数的传递顺序并不重要&lt;/strong&gt;  &lt;/p&gt;
&lt;h5&gt;3.缺省参数&lt;/h5&gt;
&lt;p&gt;调用函数时,缺省参数的值如果没有传入,则被认为是默认值,下例会打印默认的age,如果age没有被传入:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printinfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;name: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;age: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="n"&gt;printinfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jack&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;printinfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jack&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例结果为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;jack&lt;/span&gt;
&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;jack&lt;/span&gt;
&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;4.不定长参数&lt;/h5&gt;
&lt;p&gt;有时你可能需要一个函数能处理闭当初声明时更多的参数.这些参数叫做不定长参数,和上述2中参数不同,声明时不会命名.基本语法如下:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;functionname&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;formal_args&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;var_args_tuple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;function_suite&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;加了星号(*)的变量名会存放所有未命名的变量参数.选择不多传参数也可.如下示例:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printinfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;valtuple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;输出: &amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;vartuple&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="n"&gt;printinfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;printinfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例结果为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;输出&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="err"&gt;输出&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;70&lt;/span&gt;
&lt;span class="mi"&gt;80&lt;/span&gt;
&lt;span class="mi"&gt;90&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;匿名函数&lt;/h4&gt;
&lt;p&gt;python使用lambda来创建匿名函数.
    * lambda只是一个表达式,函数体闭def简单很多.
    * lambda的主题是一个表达式,而不是一个代码块.仅仅能在lambda表达式中封装有限的逻辑进去.
    * lambda函数拥有自己的命名空间,且不能访问自有参数列表之外或全局命名空间的参数.
    * 虽然lambda函数看起来只能写一行,却不等同于c或c++的内敛函数,后者的目的是调用小函数时不占用栈和内存从而增加运行效率.  &lt;/p&gt;
&lt;h5&gt;匿名函数语法&lt;/h5&gt;
&lt;p&gt;lambda函数的语法只包含一个语句,如下:&lt;br&gt;
&lt;code&gt;lamda [arg1 [,arg2,....argn]]:expression&lt;/code&gt;&lt;br&gt;
如下示例:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;#-*- coding: UTF-8 -*-&lt;/span&gt;

&lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;arg2&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;相加后的结果: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;相加后的结果: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例结果为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;相加后的结果&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="err"&gt;相加后的结果&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;return语句&lt;/h4&gt;
&lt;p&gt;return [表达式] 退出函数,选择性的向调用方返一个表达式.不带参数值的return语句返回None.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;#-*- coding: UTF-8 -*-&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;函数内 : &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;

&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例结果为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;函数内&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;变量作用域&lt;/h4&gt;
&lt;p&gt;一个程序的所有的变量并不是在哪个位置都可以访问的.访问权限决定这个变量是在哪里赋值的.&lt;br&gt;
变量的作用域决定了在哪一部分程序你可以访问哪个特定的变量.&lt;br&gt;
两种最基本的变量作用域如下:&lt;br&gt;
    1. 全局变量
    2. 局部变量&lt;/p&gt;
&lt;h5&gt;全局变量和局部变量&lt;/h5&gt;
&lt;p&gt;定义在函数内部的变量拥有一个局部作用域,定义在函数外的变量拥有全局作用域.&lt;br&gt;
局部变量只能在其被声明的函数内部访问,而全局变量可以在整个程序范围内访问.&lt;br&gt;
调用函数时,所有在函数内声明的变量名称都将加入到作用域中.如下:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;#-*- coding: UTF-8 -*-&lt;/span&gt;

&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="c1"&gt;#这是一个全局变量&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;arg2&lt;/span&gt;    &lt;span class="c1"&gt;# total在这里是局部变量&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;函数内是局部变量: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;

&lt;span class="c1"&gt;#调用函数&lt;/span&gt;
&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;函数外是全局变量: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例结果为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;函数内是局部变量&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="err"&gt;函数外是全局变量&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Python"></category></entry><entry><title>Python模块</title><link href="http://ivesein.github.io/Python-Module.html" rel="alternate"></link><published>2016-06-08T00:00:00+08:00</published><updated>2016-06-08T00:00:00+08:00</updated><author><name>Ivesein</name></author><id>tag:ivesein.github.io,2016-06-08:/Python-Module.html</id><summary type="html">&lt;hr&gt;
&lt;p&gt;Python模块(Module)是一个python文件,以.py结尾,包含了python对象定义和python语句.&lt;br&gt;
模块能逻辑的组织代码段,把相关的代码分配到一个模块里能让代码更好用,更易懂.&lt;br&gt;
模块能定义函数,类和变量,模块里也能包含可执行的代码.&lt;br&gt;
下面是一个简单的模块 support.py:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello! : &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;import 语句&lt;/h4&gt;
&lt;h5&gt;improt 导入模块&lt;/h5&gt;
&lt;p&gt;模块定义好后,我们可以使用import 语句来引入模块,语法如下:&lt;br&gt;
&lt;code&gt;import module1[, module2[,...moduleN ]&lt;/code&gt;&lt;br&gt;
比如要引入math,就可以在文件开头的地方用&lt;strong&gt;import math&lt;/strong&gt;来引入,在调用math模块中的函数时,必须这样引用:&lt;strong&gt;&lt;code&gt;math.functionname()&lt;/code&gt;&lt;/strong&gt;,模块名.函数名&lt;br&gt;
当解释器遇到import语句,如果模块在当前的搜索路径就会被引入.&lt;br&gt;
搜索路径是一个解释器会先进行搜索的所有目录的列表.如想要到哦如模块support.py …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;p&gt;Python模块(Module)是一个python文件,以.py结尾,包含了python对象定义和python语句.&lt;br&gt;
模块能逻辑的组织代码段,把相关的代码分配到一个模块里能让代码更好用,更易懂.&lt;br&gt;
模块能定义函数,类和变量,模块里也能包含可执行的代码.&lt;br&gt;
下面是一个简单的模块 support.py:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello! : &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;import 语句&lt;/h4&gt;
&lt;h5&gt;improt 导入模块&lt;/h5&gt;
&lt;p&gt;模块定义好后,我们可以使用import 语句来引入模块,语法如下:&lt;br&gt;
&lt;code&gt;import module1[, module2[,...moduleN ]&lt;/code&gt;&lt;br&gt;
比如要引入math,就可以在文件开头的地方用&lt;strong&gt;import math&lt;/strong&gt;来引入,在调用math模块中的函数时,必须这样引用:&lt;strong&gt;&lt;code&gt;math.functionname()&lt;/code&gt;&lt;/strong&gt;,模块名.函数名&lt;br&gt;
当解释器遇到import语句,如果模块在当前的搜索路径就会被引入.&lt;br&gt;
搜索路径是一个解释器会先进行搜索的所有目录的列表.如想要到哦如模块support.py,需要把命令放在脚本的顶端:&lt;br&gt;
test.py 文件代码:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;#-*- coding: UTF-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;#导入模块support&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;support&lt;/span&gt;

&lt;span class="c1"&gt;#现在可以调用模块里包含的函数了&lt;/span&gt;
&lt;span class="n"&gt;support&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ivesein&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例结果为:&lt;br&gt;
&lt;code&gt;Hello! : Ivesein&lt;/code&gt;&lt;br&gt;
一个模块只会被导入依次,不管你执行了多少次import.这样可以防止导入模块被一遍又一遍的执行.  &lt;/p&gt;
&lt;h5&gt;from XXX import XXX导入模块&lt;/h5&gt;
&lt;p&gt;Python的from语句让你从模块中导入一个指定的部分到当前的命名空间.语法如下:&lt;br&gt;
&lt;code&gt;from XXX import name1, name2, name3, ... nameN&lt;/code&gt;&lt;br&gt;
例如要导入support的pring_func()函数,使用以下语句:&lt;br&gt;
&lt;code&gt;from support import print_func&lt;/code&gt;&lt;br&gt;
这个声明不会把整个support模块导入到当前命名空间,它只会把support里的print_func单个引入到执行这个声明的模块的全局符号表里.  &lt;/p&gt;
&lt;h5&gt;from XXX import * 导入&lt;/h5&gt;
&lt;p&gt;把一个模块的所有内容全部导入到当前的命名空间也是可行的,只需要如下声明:&lt;br&gt;
&lt;code&gt;from support import *&lt;/code&gt;&lt;br&gt;
这提供了一个简单的方法来导入一个模块中的所有项目.然而这种声明不应该被过多的使用.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;搜索路径&lt;/h4&gt;
&lt;p&gt;当你导入一个模块,python解释器对模块的位置的搜索顺序是:&lt;br&gt;
    1. 当前目录
    2. 如果不在当前目录,搜索在shell变量PYTHONPATH下的每个目录
    3. 如果都找不到,python会察看默认路径.UNIX下,默认路径一般为/usr/local/lib/python/
模块搜索路径存储在system模块的sys.path变量中.变量里包含当前目录,PYTHONPATH和由安装过程决定的默认目录.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;PYTHONPATH变量&lt;/h4&gt;
&lt;p&gt;作为环境变量,PYTHONPATH由装在一个列表里的许多目录组成.&lt;br&gt;
PYTHONPATH变量的语法和shell变量PATH的一样.&lt;br&gt;
在windows系统里,典型的PYTHONPATH如下:&lt;br&gt;
&lt;code&gt;set PYTHONPATH=c:\python27\lib;&lt;/code&gt;&lt;br&gt;
在UNIX系统,则如下:&lt;br&gt;
&lt;code&gt;set PYTHONPATH=/usr/local/lib/python&lt;/code&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;命名空间和作用域&lt;/h4&gt;
&lt;p&gt;命名空间是包含了变量名称(键),和它们各自对应的对象(值)的字典.&lt;br&gt;
一个python表达式可以访问局部和全局命名空间里的变量.&lt;br&gt;
如果一个局部变量和一个全局变量重名,局部变量则会覆盖全局变量.&lt;br&gt;
python会智能的猜测一个变量是局部还是全局变量,它假设任何在函数内赋值的变量都是局部的,因此,如果要给全局变量在一个函数里赋值,必须使用global关键字.&lt;br&gt;
golbal varname 表达式告诉python 变量varname是一个全局变量,这样python就不会在局部变量里寻找这个变量了.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;dir()函数&lt;/h4&gt;
&lt;p&gt;dir()函数是一个排好序的字符串列表,内容是一个模块里定义过的名字.&lt;br&gt;
返回的列表容纳了在一个模块里定义的所有模块,变量和函数.如下:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;#-*- coding: UTF-8 -*-&lt;/span&gt;

&lt;span class="c1"&gt;#导入内置模块math&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;

&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例结果为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__file__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__name__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;acos&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;asin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;atan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="s1"&gt;&amp;#39;atan2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ceil&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cos&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cosh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;degrees&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;exp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="s1"&gt;&amp;#39;fabs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;floor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fmod&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;frexp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hypot&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ldexp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;log&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;log10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;modf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;radians&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sinh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="s1"&gt;&amp;#39;sqrt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tanh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里,特殊字符串变量__name__指向模块的名字,__file__指向模块的导入文件名.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;globals()和locals()函数&lt;/h4&gt;
&lt;p&gt;根据调用地方不同,globals()和locals()函数可悲用来返回全局和局部命名空间的名字.&lt;br&gt;
如果在函数内部调用locals(),返回的是所有能在该函数里访问的命名.&lt;br&gt;
如果在函数内部调用globals(),返回的是所有在函数里能访问的全局命名.&lt;br&gt;
两个函数的返回类型都是字典.所以名字能用keys()函数摘取.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;reload()函数&lt;/h4&gt;
&lt;p&gt;当一个模块被导入到一个脚本,模块顶层部分的代码只会被执行一次.&lt;br&gt;
因此,如果你想重型执行模块里顶层部分的代码,可以使用reload()函数,该函数会重型导入之前导入过的模块.语法如下:&lt;br&gt;
&lt;code&gt;reload(module_name)&lt;/code&gt;&lt;br&gt;
在这里,module_name直接放模块的名字,而不是一个字符串形式.不要用" "包起来.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Python中的包&lt;/h4&gt;
&lt;p&gt;包是一个分层次的文件目录结构,它定义了一个由模块及子包,和子包下的子包等组成的python的应用环境.&lt;br&gt;
简单的说,包就是文件夹,但该文件夹下必须存在_&lt;em&gt;init_&lt;/em&gt;.py文件,该文件的内容可以为空.&lt;br&gt;
_&lt;em&gt;init_&lt;/em&gt;.py文件用来标识当前文件夹是一个包.  &lt;/p&gt;</content><category term="Python"></category></entry><entry><title>Python 字典</title><link href="http://ivesein.github.io/Python-Dictionary.html" rel="alternate"></link><published>2016-06-07T00:00:00+08:00</published><updated>2016-06-07T00:00:00+08:00</updated><author><name>Ivesein</name></author><id>tag:ivesein.github.io,2016-06-07:/Python-Dictionary.html</id><summary type="html">&lt;hr&gt;
&lt;p&gt;字典是另一种可变容器模型,且可存储任意类型对象.&lt;br&gt;
字典的每个键值(key--&amp;gt;value)对用冒号(:)分隔,每个键值对之间用(,)分隔,整个字典包括在花括号({})内,格式如下:&lt;br&gt;
&lt;code&gt;dict = {key1 : value1, key2 : value2, key3 : value3}&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;键key必须是唯一的,但值value则不必.&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;值可以取任何数据类型,但键必须是不可变的,如字符串,数字,或元组.&lt;/strong&gt;&lt;br&gt;
一个简单的字典实例:&lt;br&gt;
&lt;code&gt;dict = {'Alice' : '12345', 'Beth' : '9102', 'Cecill' : '3258'}&lt;/code&gt;&lt;br&gt;
也可以如此创建字典:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dict1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;456&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;dict2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;98.6&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;访问字典里的值&lt;/h4&gt;
&lt;p&gt;把相应的键放入熟悉的方括号,如下:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;hr&gt;
&lt;p&gt;字典是另一种可变容器模型,且可存储任意类型对象.&lt;br&gt;
字典的每个键值(key--&amp;gt;value)对用冒号(:)分隔,每个键值对之间用(,)分隔,整个字典包括在花括号({})内,格式如下:&lt;br&gt;
&lt;code&gt;dict = {key1 : value1, key2 : value2, key3 : value3}&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;键key必须是唯一的,但值value则不必.&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;值可以取任何数据类型,但键必须是不可变的,如字符串,数字,或元组.&lt;/strong&gt;&lt;br&gt;
一个简单的字典实例:&lt;br&gt;
&lt;code&gt;dict = {'Alice' : '12345', 'Beth' : '9102', 'Cecill' : '3258'}&lt;/code&gt;&lt;br&gt;
也可以如此创建字典:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dict1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;456&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;dict2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;98.6&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;访问字典里的值&lt;/h4&gt;
&lt;p&gt;把相应的键放入熟悉的方括号,如下:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class="nb"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Name&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Age&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Class&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;First&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dict[&amp;#39;Name&amp;#39;]: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dict[&amp;#39;Age&amp;#39;]: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例结果为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;jack&lt;/span&gt;
&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果用字典里没有的键值访问数据,会输出错误如下:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dict[&amp;#39;Class&amp;#39;]: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出结果为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dict[&amp;#39;Class&amp;#39;]: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;KeyEerry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Class&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;修改字典&lt;/h4&gt;
&lt;p&gt;向字典添加新内容的方法是增加新的键/值对,修改或删除已有键/值对:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;#-*- coding: UTF-8 -*-&lt;/span&gt;

&lt;span class="nb"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;first&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;#修改已有内容&lt;/span&gt;
&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="c1"&gt;#增加新的内容school&lt;/span&gt;
&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;school&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;阳光小学&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dict[&amp;#39;age&amp;#39;]: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dict[&amp;#39;school&amp;#39;]: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;school&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例结果为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;school&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="err"&gt;阳光小学&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;删除字典元素&lt;/h4&gt;
&lt;p&gt;能删除一点的元素,也能清空字典,清空只需要一项操作.&lt;br&gt;
删除一个字典键/值用del命令,如下:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;#-*- coding: UTF-8 -*-&lt;/span&gt;

&lt;span class="nb"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;first&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# 删除键是name的条目&lt;/span&gt;
&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="c1"&gt;# 清空字典所由条目&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;          &lt;span class="c1"&gt;# 删除字典&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dict[&amp;#39;age&amp;#39;]: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dcit[&amp;#39;class&amp;#39;]: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果会引发一个异常,因为在使用del后字典不存在了:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dict[&amp;#39;age&amp;#39;]: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;unsubscriptable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;字典键的特性&lt;/h4&gt;
&lt;p&gt;字典值可以没有限制性的取任何python对象,既可以是标准的额对象,一可以是用户定义的,但键不行.&lt;br&gt;
两个重要的点需要记住:&lt;br&gt;
1. 不允许同一个键出现两次 .创建时如果同一个键被赋值两次,后一个会被记住.&lt;br&gt;
2. 键必须不可变,所以可以用数字,字符串或元组充当,所以用列表就不行.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;字典的内置函数&amp;amp;方法&lt;/h4&gt;
&lt;p&gt;Python字典包含了以下内置函数:  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数名&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cmp(dict1,dict2)&lt;/td&gt;
&lt;td&gt;比较两个字典元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;len(dict)&lt;/td&gt;
&lt;td&gt;计算字典元素个数,即键的总数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;str(dict)&lt;/td&gt;
&lt;td&gt;输出字典可打印的字符串表示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;type(variable)&lt;/td&gt;
&lt;td&gt;返回输入的变量类型,如果变量是字典就返回字典类型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Python字典包含以下内置方法:  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法名&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;dict.clear()&lt;/td&gt;
&lt;td&gt;删除字典内所有元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dict.copy()&lt;/td&gt;
&lt;td&gt;返回一个字典的浅拷贝&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dict.fromkeys(seq[, val])&lt;/td&gt;
&lt;td&gt;创建一个新字典,以序列seq中元素做字典的键,val为字典所有键对应的初始值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dict.get(key, default=None)&lt;/td&gt;
&lt;td&gt;返回指定键的值,如果值不在字典中返回default值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dict.has_key(key)&lt;/td&gt;
&lt;td&gt;如果键在字典dict内返回true,否则返回false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dict.items()&lt;/td&gt;
&lt;td&gt;以列表返回可遍历的(键,值)元组数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dict.keys()&lt;/td&gt;
&lt;td&gt;以列表返回一个字典所有的键&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dict.setdefault(key, default=None)&lt;/td&gt;
&lt;td&gt;和get类似,但如果键不存在,将会添加键并设置值为default&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dict.update(dict2)&lt;/td&gt;
&lt;td&gt;把字典dict2的键值对更新到dict里&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dict.values()&lt;/td&gt;
&lt;td&gt;里列表返回字典中的所有值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="Python"></category></entry><entry><title>Python 列表</title><link href="http://ivesein.github.io/Python-list.html" rel="alternate"></link><published>2016-06-07T00:00:00+08:00</published><updated>2016-06-07T00:00:00+08:00</updated><author><name>Ivesein</name></author><id>tag:ivesein.github.io,2016-06-07:/Python-list.html</id><summary type="html">&lt;hr&gt;
&lt;p&gt;序列是python中最基本的数据结构:list = [元素1,元素2,元素3,...].&lt;br&gt;
序列中每个元素都分配以个数字标记它的位置或索引,第一个索引是0,第二个是1,依次类推.&lt;br&gt;
列表的数据项不需要具有相同的类型,创建一个列表,只需要把逗号分隔的不同的数据项用放括号括起来即可:&lt;br&gt;
&lt;code&gt;list1 = [10, "hello", 3.14, 'a']&lt;/code&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;访问列表中的值&lt;/h4&gt;
&lt;p&gt;使用下标索引来访问列表中的值;同样,序列也支持切片截取,加,乘等操作:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class="n"&gt;list1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上示例结果为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;更新列表&lt;/h4&gt;
&lt;p&gt;你可以对列表的数据项进行修改或更新 …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;p&gt;序列是python中最基本的数据结构:list = [元素1,元素2,元素3,...].&lt;br&gt;
序列中每个元素都分配以个数字标记它的位置或索引,第一个索引是0,第二个是1,依次类推.&lt;br&gt;
列表的数据项不需要具有相同的类型,创建一个列表,只需要把逗号分隔的不同的数据项用放括号括起来即可:&lt;br&gt;
&lt;code&gt;list1 = [10, "hello", 3.14, 'a']&lt;/code&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;访问列表中的值&lt;/h4&gt;
&lt;p&gt;使用下标索引来访问列表中的值;同样,序列也支持切片截取,加,乘等操作:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class="n"&gt;list1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上示例结果为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;更新列表&lt;/h4&gt;
&lt;p&gt;你可以对列表的数据项进行修改或更新,你也可以使用append()方法来添加列表项,也可以使用del方法,删除列表项元素:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;#修改列表元素&lt;/span&gt;
&lt;span class="n"&gt;list1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;#append()方法追加列表元素&lt;/span&gt;
&lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#将元素7追加到列表末尾&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt;
&lt;span class="c1"&gt;#del 删除列表元素&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="c1"&gt;#删除列表中第四个元素hello&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例结果为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;列表运算符&lt;/h4&gt;
&lt;p&gt;列表对 + 和 * 的操作副与字符串相似: + 用于组合列表, * 用于重复列表元素  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python表达式&lt;/th&gt;
&lt;th&gt;结果&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;len([1, 2, 3])&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;计算列表长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[1, 2, 3]+[4, 5, 6]&lt;/td&gt;
&lt;td&gt;[1, 2, 3, 4, 5, 6]&lt;/td&gt;
&lt;td&gt;组合两个列表元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;["Hi!"]*3&lt;/td&gt;
&lt;td&gt;["Hi!", "Hi!", "Hi!"]&lt;/td&gt;
&lt;td&gt;重复列表元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3 in [1, 2, 3]&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;元素是否存在于列表中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;for x in [1, 2 , 3]&lt;/td&gt;
&lt;td&gt;1   2   3&lt;/td&gt;
&lt;td&gt;迭代&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h4&gt;Python列表的函数&amp;amp;方法&lt;/h4&gt;
&lt;p&gt;python包含以下函数:  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;函数名&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;cmp(list1,list2)&lt;/td&gt;
&lt;td&gt;比较两个列表的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;len(list)&lt;/td&gt;
&lt;td&gt;列表长度,列表内包含元素个数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;max(list)&lt;/td&gt;
&lt;td&gt;返回列表内元素的最大值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;min(list)&lt;/td&gt;
&lt;td&gt;返回列表内元素的最小值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;list(seq)&lt;/td&gt;
&lt;td&gt;将元组转换为列表&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;python包含以下方法:  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法名&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;list.append(obj)&lt;/td&gt;
&lt;td&gt;在列表末尾添加新的对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list.count(obj)&lt;/td&gt;
&lt;td&gt;统计某个元素在列表中出现的次数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list.extend(seq)&lt;/td&gt;
&lt;td&gt;在列表的末尾一次性追加另一个列表中的多个值(用新列表扩展原来的列表)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list.index(obj)&lt;/td&gt;
&lt;td&gt;从列表中找出某个值第一个匹配项的索引位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list.insert(index,obj)&lt;/td&gt;
&lt;td&gt;将对象插入列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list.pop(pop=list[-1])&lt;/td&gt;
&lt;td&gt;弹出列表中的一个元素(默认为最后一个),并返回该元素的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list.remove(obj)&lt;/td&gt;
&lt;td&gt;移除列表中某个值的第一个匹配项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list.reverse()&lt;/td&gt;
&lt;td&gt;反向列表中的所有元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list.sort([func])&lt;/td&gt;
&lt;td&gt;对原列表进行排序&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="Python"></category></entry><entry><title>Python数据类型</title><link href="http://ivesein.github.io/python-learning-notes2.html" rel="alternate"></link><published>2016-06-05T09:15:00+08:00</published><updated>2016-06-05T09:15:00+08:00</updated><author><name>Ivesein</name></author><id>tag:ivesein.github.io,2016-06-05:/python-learning-notes2.html</id><summary type="html">&lt;p&gt;变量是存储在内存中的值，这就意味着在创建变量时会在内存中开辟一个空间。&lt;/p&gt;
&lt;p&gt;基于变量的数据类型，解释器会分配制定内存，并决定什么数据可以被存储在内存中。因此，变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符。&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;变量赋值&lt;/h4&gt;
&lt;p&gt;Python中的变量赋值不需要声明类型。&lt;/p&gt;
&lt;p&gt;每个变量在内存中的创建，都包括变量的标识，名称和数据这些信息。&lt;/p&gt;
&lt;p&gt;每个变量在使用前都必须赋值，变量赋值以后才会被创建。&lt;/p&gt;
&lt;p&gt;= 用来给变量赋值，=  运算符左边是变量名，右边是存储在变量中的值，例如：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;#-*- coding:UTF-8 -*-&lt;/span&gt;

&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="c1"&gt;#整形变量赋值&lt;/span&gt;
&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.14&lt;/span&gt;     &lt;span class="c1"&gt;#浮点型变量赋值&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;张三&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;#字符型变量赋值 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4&gt;多个变量赋值&lt;/h4&gt;
&lt;p&gt;Python允许你同时为多个相同类型变量赋同一个值：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a = b =c = 1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;你也可以为多个不同类型变量赋多个值：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a, b …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;变量是存储在内存中的值，这就意味着在创建变量时会在内存中开辟一个空间。&lt;/p&gt;
&lt;p&gt;基于变量的数据类型，解释器会分配制定内存，并决定什么数据可以被存储在内存中。因此，变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符。&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;变量赋值&lt;/h4&gt;
&lt;p&gt;Python中的变量赋值不需要声明类型。&lt;/p&gt;
&lt;p&gt;每个变量在内存中的创建，都包括变量的标识，名称和数据这些信息。&lt;/p&gt;
&lt;p&gt;每个变量在使用前都必须赋值，变量赋值以后才会被创建。&lt;/p&gt;
&lt;p&gt;= 用来给变量赋值，=  运算符左边是变量名，右边是存储在变量中的值，例如：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;#-*- coding:UTF-8 -*-&lt;/span&gt;

&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="c1"&gt;#整形变量赋值&lt;/span&gt;
&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.14&lt;/span&gt;     &lt;span class="c1"&gt;#浮点型变量赋值&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;张三&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;#字符型变量赋值 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4&gt;多个变量赋值&lt;/h4&gt;
&lt;p&gt;Python允许你同时为多个相同类型变量赋同一个值：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a = b =c = 1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;你也可以为多个不同类型变量赋多个值：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a, b ,c = 1, 3.14, "张三"&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Python标准数据类型&lt;/h4&gt;
&lt;p&gt;在内存中存储的数据可以有多种类型，Python定义了一些标准类型，用于存储各种类型的数据。&lt;/p&gt;
&lt;p&gt;Python有五个标准数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Numbers(数字)&lt;/li&gt;
&lt;li&gt;String (字符串)&lt;/li&gt;
&lt;li&gt;List(列表)&lt;/li&gt;
&lt;li&gt;Tuple(元组)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dictionary(字典)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h5&gt;Python数字&lt;/h5&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python支持四种不同的数字类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;int (整型)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;long (长整型|也可以代表八进制和十六进制)&lt;/p&gt;
&lt;p&gt;长整型也可以用小写“L”，但是还是建议使用大写“L"，避免与数字1混淆&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;float (浮点型)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;complex (复数)&lt;/p&gt;
&lt;p&gt;复数由实数部分和虚数部分组成，可以用a+bj，或者complex(a, b)表示，复数的实数部a和虚数部bj都是浮点型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h5&gt;Python字符串&lt;/h5&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;字符串或串(String)是由数字，字母，下划线组成的一串字符，它是编程语言中表示文本的数据类型&lt;/p&gt;
&lt;p&gt;Python的字符串列表有2种取值顺序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从左到右索引默认从0开始，最大范围是字符串长度减1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从右到左索引默认从-1开始，最大范围是字符串开头&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;###### 字符串的截取、连接和重复操作&lt;/p&gt;
&lt;p&gt;变量名[头下标:尾下标]  &lt;/p&gt;
&lt;p&gt;标识从变量中截取从头下标到尾下标(包括头下标不包含尾下标)之间的字符，示例:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;s  = 'ohelloworld!'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;s[1:5]的结果为hello&lt;/p&gt;
&lt;p&gt;+加号运算符用于字符串连接运算；*星号运算符用于重复操作，示例：&lt;/p&gt;
&lt;p&gt;```
   #!/usr/bin/python
   #-&lt;em&gt;- coding: UTF-8 -&lt;/em&gt;-&lt;/p&gt;
&lt;p&gt;str = 'Hello World!'&lt;/p&gt;
&lt;p&gt;print str           #输出完整字符串
   print str[0]        #输出字符串中的第一个字符
   print str[2:5]      #输出字符串中第三个至第五个之间的字符串
   print str[2:]       #输出从第三个字符开始的字符串
   print str * 2       #输出字符串2次
   print str + "TEST"  #输出连接的字符串
   ```&lt;/p&gt;
&lt;p&gt;以上示例输出结果：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Hello World!
   H
   llo
   llo World!
   Hello World!Hello World!
   Hello World!TEST&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h5&gt;Python列表&lt;/h5&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;List（列表）是Python中使用最频繁的数据类型。&lt;/p&gt;
&lt;p&gt;List可以完成大多数集合类的数据结构实现。它支持字符、数字、字符串甚至可以抱汗列表（即嵌套）。&lt;/p&gt;
&lt;p&gt;列表用[]标识，是Python最通用的复合数据类型&lt;/p&gt;
&lt;p&gt;###### 列表的截取、连接和重复操作&lt;/p&gt;
&lt;p&gt;变量名[头下标:尾下标]  &lt;/p&gt;
&lt;p&gt;标识从变量中截取从头下标到尾下标(包括头下标不包含尾下标)之间的内容&lt;/p&gt;
&lt;p&gt;+加号运算符用于列表连接运算；*星号运算符用于重复操作，示例：&lt;/p&gt;
&lt;p&gt;```
   #!/usr/bin/python
   #-&lt;em&gt;- coding: UTF-8 -&lt;/em&gt;-&lt;/p&gt;
&lt;p&gt;list = ['jack', '123', '3.14', 'rose', '70.2']
   tinylist = [123, 'rose']&lt;/p&gt;
&lt;p&gt;print list               # 输出完整列表
   print list[0]           # 输出列表的第一个元素
   print list[1:3]         # 输出列表的第二个至第三个元素
   print list[2:]          # 输出列表从第二个开始至末尾的所有元素
   print tinylist * 2      # 输出列表两次
   print list + tinylist   # 输出组合的列表
   ```&lt;/p&gt;
&lt;p&gt;以上示例输出结果：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;['jack', '123', '3.14', 'rose', '70.2']
   jack
   ['123', '3.14']
   ['3.14', 'rose', '70.2']
   [123, 'rose',123, 'rose']
   ['jack', '123', '3.14', 'rose', '70.2', 123, 'rose']&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h5&gt;Python元组&lt;/h5&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;元组用()标识，内部元素用逗号隔开。元组不能二次赋值，相当于只读列表。&lt;/p&gt;
&lt;p&gt;元组也可以进行切片，连接等操作：&lt;/p&gt;
&lt;p&gt;```
   #!/usr/bin/python
   # -&lt;em&gt;- coding: UTF-8 -&lt;/em&gt;-&lt;/p&gt;
&lt;p&gt;tuple = ( 'runoob', 786 , 2.23, 'john', 70.2 )
   tinytuple = (123, 'john')&lt;/p&gt;
&lt;p&gt;print tuple               # 输出完整元组
   print tuple[0]            # 输出元组的第一个元素
   print tuple[1:3]          # 输出第二个至第三个的元素 
   print tuple[2:]           # 输出从第三个开始至列表末尾的所有元素
   print tinytuple * 2       # 输出元组两次
   print tuple + tinytuple   # 打印组合的元组
   ```&lt;/p&gt;
&lt;p&gt;以上示例输出结果：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;('runoob', 786, 2.23, 'john', 70.2)
   runoob
   (786, 2.23)
   (2.23, 'john', 70.2)
   (123, 'john', 123, 'john')
   ('runoob', 786, 2.23, 'john', 70.2, 123, 'john')&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;元组不允许重新赋值操作，而列表是允许重新赋值&lt;/strong&gt;的：&lt;/p&gt;
&lt;p&gt;```
   #!/usr/bin/python
   # -&lt;em&gt;- coding: UTF-8 -&lt;/em&gt;-&lt;/p&gt;
&lt;p&gt;tuple = ( 'runoob', 786 , 2.23, 'john', 70.2 )
   list = [ 'runoob', 786 , 2.23, 'john', 70.2 ]
   tuple[2] = 1000    # 元组中重新赋值是非法的
   list[2] = 1000     # 列表中是合法的
   ```&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h5&gt;Python字典&lt;/h5&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;字典dictionary是除list列表外Python中最灵活的内置数据结构类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;列表list&lt;/strong&gt;是&lt;strong&gt;有序&lt;/strong&gt;的对象集合，&lt;strong&gt;字典dictionary&lt;/strong&gt;是&lt;strong&gt;无序&lt;/strong&gt;的对象合集，两者之间的区别在于：字典中的元素是通过键值对来存取的，而不是通过偏移存取。&lt;/p&gt;
&lt;p&gt;字典dictionary用{}标识，字典由索引key和对应的值value组成。示例：&lt;/p&gt;
&lt;p&gt;```
   #!/usr/bin/python
   #-&lt;em&gt;- coding:UTF-8 -&lt;/em&gt;-&lt;/p&gt;
&lt;p&gt;dict = {}
   dict['one'] = "This is one"
   dict[2] = "This is two"&lt;/p&gt;
&lt;p&gt;tinydict = {'name': 'jack', 'code':1000, 'dept':'sales'}&lt;/p&gt;
&lt;p&gt;print dict['one']          # 输出键值为’one‘的值
   print dict[2]              # 输出键值为2 的值
   print tinydict             # 输出完整的字典tinydict
   print tinydict.key()       # 输出所有的键值key
   print tinydict.values()    # 输出所有的值values
   ```&lt;/p&gt;
&lt;p&gt;输出结果为：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;This is one
   this is two
   {'dept': 'sales', 'code': 6734, 'name': 'jack'}
   ['dept', 'code', 'name']
   ['sales', 1000, 'jack']&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h5&gt;Python数据类型转换&lt;/h5&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数据类型的转换只需要将数据类型作为函数名即可。&lt;/p&gt;
&lt;p&gt;以下几个内置函数可以执行数据类型之间的转换，这些函数返回一个新的对象，标识转换的值：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;将x转换为一个整数&lt;/td&gt;
&lt;td&gt;int(x)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;将x转换为一个长整数&lt;/td&gt;
&lt;td&gt;long(x)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;将x转换为一个浮点数&lt;/td&gt;
&lt;td&gt;float(x)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;创建一个复数&lt;/td&gt;
&lt;td&gt;complex(real,imag)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;将对象x转换为字符串&lt;/td&gt;
&lt;td&gt;str(x)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;将对象x转换为表达式字符串&lt;/td&gt;
&lt;td&gt;repr(x)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;用来计算在字符串中的有效python表达式，并返回一个对象&lt;/td&gt;
&lt;td&gt;eval(str)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;将序列s转换为一个元组&lt;/td&gt;
&lt;td&gt;tuple(s)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;将序列s转换为一个列表&lt;/td&gt;
&lt;td&gt;list(s)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;转换为可变集合&lt;/td&gt;
&lt;td&gt;set(s)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;创建一个字典，d必须是一个序列(key,value)元组&lt;/td&gt;
&lt;td&gt;dict(d)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;转换为不可变集合&lt;/td&gt;
&lt;td&gt;frozenset(s)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;将一个整数转换为一个字符&lt;/td&gt;
&lt;td&gt;chr(x)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;将一个整数转换为unicode字符&lt;/td&gt;
&lt;td&gt;unichr(x)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;将一个字符转换为它的整数值&lt;/td&gt;
&lt;td&gt;ord(x)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;将一个整数转换为一个十六进制字符串&lt;/td&gt;
&lt;td&gt;hex(x)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;将一个整数转换为一个八进制字符串&lt;/td&gt;
&lt;td&gt;oct(x)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h5&gt;其他问题&lt;/h5&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Python的所有数据类型都是类，可以通过函数type()来查看该变量的数据类型&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;n=1
type(n)
   &lt;type 'int'&gt;
n="runoob"
type(n)
   &lt;type 'str'&gt;&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;此处还可以用isinstance()函数来判断：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a = 111
   isinstance(a, int)
   True&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;isinstance()和type()的区别在于：&lt;/p&gt;
&lt;p&gt;```
   class A:
       pass&lt;/p&gt;
&lt;p&gt;class B(A):
       pass&lt;/p&gt;
&lt;p&gt;isinstance(A(), A)  # returns True
   type(A()) == A      # returns True
   isinstance(B(), A)    # returns True
   type(B()) == A        # returns False
   ```&lt;/p&gt;
&lt;p&gt;type()不会认为子类是一种父类类型。
   isinstance()会认为子类是一种父类类型。&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Python基本语法</title><link href="http://ivesein.github.io/python-learning-notes1.html" rel="alternate"></link><published>2016-06-04T10:13:00+08:00</published><updated>2016-06-04T10:13:00+08:00</updated><author><name>Ivesein</name></author><id>tag:ivesein.github.io,2016-06-04:/python-learning-notes1.html</id><summary type="html">&lt;h4&gt;Python标识符&lt;/h4&gt;
&lt;p&gt;在python里，标识符由字母、数字、下划线组成。&lt;/p&gt;
&lt;p&gt;在python中，所有标识符可以包括英文、数字以及下划线，&lt;strong&gt;但不能以数字开头&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;python中的标识符是&lt;strong&gt;区分大小写&lt;/strong&gt;的。&lt;/p&gt;
&lt;p&gt;以下划线开头的标识符是有特殊意义的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以单下划线开头(_foo)的代表不能直接访问的类属性，需要通过类提供的接口访问，不能用
  &lt;code&gt;from xxx import *&lt;/code&gt;来导入&lt;/li&gt;
&lt;li&gt;以双下划线开头(__foo)的代表类的私有成员&lt;/li&gt;
&lt;li&gt;以双下划线开头和结尾(__foo__)的代表python里特殊方法专用的标识，如___init__()代表类的构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Python保留字符&lt;/h4&gt;
&lt;p&gt;下面列表显示了python中的保留字符，&lt;strong&gt;这些保留字符不能用做常量或变量或者任何其他标识符名称&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所有python的关键字只包含小写字母：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;and&lt;/th&gt;
&lt;th align="center"&gt;exec&lt;/th&gt;
&lt;th align="center"&gt;not&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;assert&lt;/td&gt;
&lt;td align="center"&gt;finally&lt;/td&gt;
&lt;td align="center"&gt;or&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;break&lt;/td&gt;
&lt;td align="center"&gt;for&lt;/td&gt;
&lt;td align="center"&gt;pass&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;class&lt;/td&gt;
&lt;td align="center"&gt;from&lt;/td&gt;
&lt;td align="center"&gt;print&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;continue&lt;/td&gt;
&lt;td align="center"&gt;global&lt;/td&gt;
&lt;td align="center"&gt;raise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;def …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;h4&gt;Python标识符&lt;/h4&gt;
&lt;p&gt;在python里，标识符由字母、数字、下划线组成。&lt;/p&gt;
&lt;p&gt;在python中，所有标识符可以包括英文、数字以及下划线，&lt;strong&gt;但不能以数字开头&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;python中的标识符是&lt;strong&gt;区分大小写&lt;/strong&gt;的。&lt;/p&gt;
&lt;p&gt;以下划线开头的标识符是有特殊意义的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以单下划线开头(_foo)的代表不能直接访问的类属性，需要通过类提供的接口访问，不能用
  &lt;code&gt;from xxx import *&lt;/code&gt;来导入&lt;/li&gt;
&lt;li&gt;以双下划线开头(__foo)的代表类的私有成员&lt;/li&gt;
&lt;li&gt;以双下划线开头和结尾(__foo__)的代表python里特殊方法专用的标识，如___init__()代表类的构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Python保留字符&lt;/h4&gt;
&lt;p&gt;下面列表显示了python中的保留字符，&lt;strong&gt;这些保留字符不能用做常量或变量或者任何其他标识符名称&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所有python的关键字只包含小写字母：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;and&lt;/th&gt;
&lt;th align="center"&gt;exec&lt;/th&gt;
&lt;th align="center"&gt;not&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;assert&lt;/td&gt;
&lt;td align="center"&gt;finally&lt;/td&gt;
&lt;td align="center"&gt;or&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;break&lt;/td&gt;
&lt;td align="center"&gt;for&lt;/td&gt;
&lt;td align="center"&gt;pass&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;class&lt;/td&gt;
&lt;td align="center"&gt;from&lt;/td&gt;
&lt;td align="center"&gt;print&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;continue&lt;/td&gt;
&lt;td align="center"&gt;global&lt;/td&gt;
&lt;td align="center"&gt;raise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;def&lt;/td&gt;
&lt;td align="center"&gt;if&lt;/td&gt;
&lt;td align="center"&gt;return&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;del&lt;/td&gt;
&lt;td align="center"&gt;improt&lt;/td&gt;
&lt;td align="center"&gt;try&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;elif&lt;/td&gt;
&lt;td align="center"&gt;in&lt;/td&gt;
&lt;td align="center"&gt;while&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;else&lt;/td&gt;
&lt;td align="center"&gt;is&lt;/td&gt;
&lt;td align="center"&gt;with&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;except&lt;/td&gt;
&lt;td align="center"&gt;lambda&lt;/td&gt;
&lt;td align="center"&gt;yield&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h4&gt;行和缩进&lt;/h4&gt;
&lt;p&gt;Python与其他语言最大的区别就是，Python的代码块不使用打括号{}来控制类和函数以及其他逻辑判断。Python最具特色的就是用严格的缩进来控制代码块。&lt;/p&gt;
&lt;p&gt;缩进的空白数量是可变的，但是所有的代码块语句必须包含相同的缩进空白数量，这个必须严格执行。&lt;/p&gt;
&lt;p&gt;​   &lt;strong&gt;建议使用4个空格控制缩进&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​   &lt;strong&gt;尽量避免使用制表符进行缩进&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​   &lt;strong&gt;不要将制表符和空格混合使用&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;多行语句&lt;/h4&gt;
&lt;p&gt;Python语句中一般以新行作为一条语句的结束符。&lt;/p&gt;
&lt;p&gt;有时为了代码美观可使用反斜杠( \ )将一条语句分为多行显示，如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item_one&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
        &lt;span class="n"&gt;item_two&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
        &lt;span class="n"&gt;item_three&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;语句中包含[],{}或()就不需要使用多行连接符。如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Monday&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Tuesday&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Wednesday&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Thursday&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Friday&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ython可以在同一行中使用多条语句，语句之间使用分号( ; )分割：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;runoob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;Python引号&lt;/h4&gt;
&lt;p&gt;Python可以使用单引号( ' ' )、双引号( " " )、或三引号( ''' 或 """ )来标识字符串，引号的开始和结束必须是相同类型的。&lt;/p&gt;
&lt;p&gt;其中三引号可以由多行组成，编写多行文本的快捷语法，常用语文档字符串，在文件的特定地点，被当做注释：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;word&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;sentence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;这是一个句子。&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;paragraph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&amp;quot;这是一个段落，&lt;/span&gt;
&lt;span class="s2"&gt;            包含了多条语句&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;Python注释&lt;/h4&gt;
&lt;p&gt;Python中单行注释用#开头&lt;/p&gt;
&lt;p&gt;注释可以在语句或表达式行末&lt;/p&gt;
&lt;p&gt;多行注释使用三个单引号或三个双引号&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;#-*- coding: UTF-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;#以上为单行注释&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;#行末注释&lt;/span&gt;

&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;这是多行注释，使用单引号&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;这是多行注释，使用单引号&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;这是多行注释，使用单引号&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;这是多行注释，使用双引号&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;这是多行注释，使用双引号&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;这是多行注释，使用双引号&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;Python空行&lt;/h4&gt;
&lt;p&gt;函数之间或类的方法之间使用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。&lt;/p&gt;
&lt;p&gt;空行与代码缩进不同，空行并不是Python 语法的一部分。书写时不插入空行Python解释器运行也不会出现错误，但是空行的作用在于分隔两段不同功能或含义的代码，以便日后代码的维护或重构。&lt;/p&gt;
&lt;p&gt;记住：空行也是程序代码的一部分&lt;/p&gt;</content><category term="python"></category></entry><entry><title>My super title</title><link href="http://ivesein.github.io/my-super-post.html" rel="alternate"></link><published>2010-12-03T10:20:00+08:00</published><updated>2010-12-05T19:30:00+08:00</updated><author><name>Alexis Metaireau</name></author><id>tag:ivesein.github.io,2010-12-03:/my-super-post.html</id><summary type="html">&lt;p&gt;Short version for index and feeds&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the content of my super blog post.这是我的博客测试文章！This is the content of my super blog post.这是我的博客测试文章！This is the content of my super blog post.这是我的博客测试文章！This is the content of my super blog post.这是我的博客测试文章！This is the content of my super blog post.这是我的博客测试文章！This is the content of my super blog post.这是我的博客测试文章！This is the content of my super blog post.这是我的博客测试文章！This is the content of my super blog post.这是我的博客测试文章！This is the content of my super blog post.这是我的博客测试文章！This is the content of my super blog post.这是我的博客测试文章！This is the content of my super blog post.这是我的博客测试文章！This is the content of my super blog post.这是我的博客测试文章！This is the content of my super blog post.这是我的博客测试文章！This is the content of my super blog post.这是我的博客测试文章！This is the content of my super blog post.这是我的博客测试文章！This is the content of my super blog post.这是我的博客测试文章！&lt;/p&gt;</content><category term="pelican"></category><category term="publishing"></category></entry></feed>